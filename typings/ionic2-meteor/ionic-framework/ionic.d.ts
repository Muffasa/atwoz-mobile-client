// Generated by dts-bundle v0.4.3
// Dependencies for this module:


declare module 'ionic/ionic' {
    export * from 'ionic/ionic/config/bootstrap';
    export * from 'ionic/ionic/config/config';
    export * from 'ionic/ionic/config/directives';
    export * from 'ionic/ionic/decorators/config-component';
    export * from 'ionic/ionic/decorators/app';
    export * from 'ionic/ionic/decorators/page';
    export * from 'ionic/ionic/components';
    export * from 'ionic/ionic/platform/platform';
    export * from 'ionic/ionic/platform/storage';
    export * from 'ionic/ionic/util/click-block';
    export * from 'ionic/ionic/util/events';
    export * from 'ionic/ionic/util/keyboard';
    export * from 'ionic/ionic/animations/animation';
    export * from 'ionic/ionic/translation/translate';
    export * from 'ionic/ionic/translation/translate_pipe';
}

declare module 'ionic/ionic/config/bootstrap' {
    import { Provider } from 'angular2/core';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Form } from 'ionic/ionic/util/form';
    import { Keyboard } from 'ionic/ionic/util/keyboard';
    import { Translate } from 'ionic/ionic/translation/translate';
    import { TapClick } from 'ionic/ionic/components/tap-click/tap-click';
    /**
      * @private
      */
    export function ionicProviders(args?: {}): (typeof IonicApp | Provider | typeof TapClick | typeof Form | typeof Keyboard | typeof Translate | any[])[];
}

declare module 'ionic/ionic/config/config' {
    /**
     * @ngdoc service
     * @name Config
     * @module ionic
     * @description
     * Config allows you to set the modes of your components
     */
    import { Platform } from 'ionic/ionic/platform/platform';
    /**
        * @name Config
        * @demo /docs/v2/demos/config/
        * @description
        * Config lets you change multiple or a single value in an apps mode configuration. Things such as tab placement, icon changes, and view animations can be set here.
        *
        * ```ts
        * @App({
        *   template: `<ion-nav [root]="root"></ion-nav>`
        *   config: {
        *     backButtonText: 'Go Back',
        *     iconMode: 'ios',
        *     modalEnter: 'modal-slide-in',
        *     modalLeave: 'modal-slide-out',
        *     tabbarPlacement: 'bottom',
        *     pageTransition: 'ios',
        *   }
        * })
        * ```
        *
        * Config can be overwritting at multiple levels, allowing deeper configuration. Taking the example from earlier, we can override any setting we want based on a platform.
        * ```ts
        * @App({
        *   template: `<ion-nav [root]="root"></ion-nav>`
        *   config: {
        *     tabbarPlacement: 'bottom',
        *     platforms: {
        *      ios: {
        *        tabbarPlacement: 'top',
        *      }
        *     }
        *   }
        * })
        * ```
        *
        * We could also configure these values at a component level. Take `tabbarPlacement`, we can configure this as a property on our `ion-tabs`.
        *
        * ```html
        * <ion-tabs tabbarPlacement="top">
        *    <ion-tab tabTitle="Dash" tabIcon="pulse" [root]="tabRoot"></ion-tab>
        *  </ion-tabs>
        * ```
        *
        * The property will override anything else set in the apps.
        *
        * The last way we could configure is through URL query strings. This is useful for testing while in the browser.
        * Simply add `?ionic<PROPERTYNAME>=<value>` to the url.
        *
        * ```bash
        * http://localhost:8100/?ionicTabbarPlacement=bottom
        * ```
        *
        * Custom values can be added to config, and looked up at a later point in time.
        *
        * ``` javascript
        * config.set('ios', 'favoriteColor', 'green');
        * // from any page in your app:
        * config.get('favoriteColor'); // 'green'
        * ```
        *
        *
        * A config value can come from anywhere and be anything, but there are a default set of values.
        *
        *
        * | Config property            | Default iOS Value      | Default MD Value          |
        * |----------------------------|------------------------|---------------------------|
        * | activator                  | highlight              | ripple                    |
        * | actionSheetEnter           | action-sheet-slide-in  | action-sheet-md-slide-in  |
        * | actionSheetLeave           | action-sheet-slide-out | action-sheet-md-slide-out |
        * | alertEnter                 | alert-pop-in           | alert-md-pop-in           |
        * | alertLeave                 | alert-pop-out          | alert-md-pop-out          |
        * | backButtonText             | Back                   |                           |
        * | backButtonIcon             | ion-ios-arrow-back     | ion-md-arrow-back         |
        * | iconMode                   | ios                    | md                        |
        * | menuType                   | reveal                 | overlay                   |
        * | modalEnter                 | modal-slide-in         | modal-md-slide-in         |
        * | modalLeave                 | modal-slide-out        | modal-md-slide-out        |
        * | pageTransition             | ios-transition         | md-transition             |
        * | pageTransitionDelay        | 16                     | 120                       |
        * | tabbarPlacement            | bottom                 | top                       |
        * | tabbarHighlight            |                        | top                       |
        * | tabSubPage                 |                        | true                      |
        *
     **/
    export class Config {
            platform: Platform;
            constructor(config: any);
            /**
                * @private
                * @name settings()
                * @description
                */
            settings(): any;
            /**
                * @name set
                * @description
                * Sets a single config value.
                *
                * @param {String} [platform] - The platform (either 'ios' or 'android') that the config value should apply to. Leaving this blank will apply the config value to all platforms.
                * @param {String} [key] - The key used to look up the value at a later point in time.
                * @param {String} [value] - The config value being stored.
                */
            set(): this;
            /**
                * @name get
                * @description
                * Returns a single config value, given a key.
                *
                * @param {String} [key] - the key for the config value
                */
            get(key: any): any;
            /**
                * @private
                */
            setPlatform(platform: any): void;
            static setModeConfig(mode: any, config: any): void;
            static getModeConfig(mode: any): any;
    }
}

declare module 'ionic/ionic/config/directives' {
    import { Type } from 'angular2/core';
    import { Menu } from 'ionic/ionic/components/menu/menu';
    import { MenuToggle } from 'ionic/ionic/components/menu/menu-toggle';
    import { MenuClose } from 'ionic/ionic/components/menu/menu-close';
    import { Button } from 'ionic/ionic/components/button/button';
    import { Blur } from 'ionic/ionic/components/blur/blur';
    import { Content } from 'ionic/ionic/components/content/content';
    import { Scroll } from 'ionic/ionic/components/scroll/scroll';
    import { Refresher } from 'ionic/ionic/components/scroll/pull-to-refresh';
    import { Slides, Slide } from 'ionic/ionic/components/slides/slides';
    import { Tabs } from 'ionic/ionic/components/tabs/tabs';
    import { Tab } from 'ionic/ionic/components/tabs/tab';
    import { List, ListHeader } from 'ionic/ionic/components/list/list';
    import { ItemInput } from 'ionic/ionic/components/input/input';
    import { ItemSliding } from 'ionic/ionic/components/item/item-sliding';
    import { Toolbar, ToolbarTitle, ToolbarItem } from 'ionic/ionic/components/toolbar/toolbar';
    import { Icon } from 'ionic/ionic/components/icon/icon';
    import { Checkbox } from 'ionic/ionic/components/checkbox/checkbox';
    import { Select } from 'ionic/ionic/components/select/select';
    import { Toggle } from 'ionic/ionic/components/toggle/toggle';
    import { TextInput } from 'ionic/ionic/components/text-input/text-input';
    import { Label } from 'ionic/ionic/components/label/label';
    import { Segment, SegmentButton } from 'ionic/ionic/components/segment/segment';
    import { RadioGroup, RadioButton } from 'ionic/ionic/components/radio/radio';
    import { Searchbar } from 'ionic/ionic/components/searchbar/searchbar';
    import { Nav } from 'ionic/ionic/components/nav/nav';
    import { NavPush } from 'ionic/ionic/components/nav/nav-push';
    import { NavRouter } from 'ionic/ionic/components/nav/nav-router';
    import { NavbarTemplate, Navbar } from 'ionic/ionic/components/navbar/navbar';
    import { IdRef } from 'ionic/ionic/components/app/id';
    import { HideWhen } from 'ionic/ionic/components/show-hide-when/show-hide-when';
    /**
      * @name IONIC_DIRECTIVES
      * @private
      * @description
      * The core Ionic directives as well as Angular's CORE_DIRECTIVES and
      * FORM_DIRECTIVES.  Automatically available in every [@Page](../Page/) template.
      *
      * **Angular**
      * - CORE_DIRECTIVES
      * - FORM_DIRECTIVES
      *
      * **Content**
      * -  Menu
      * -  MenuToggle
      * -  MenuClose
      *
      * -  Button
      * -  Blur
      * -  Content
      * -  Scroll
      * -  Refresher
      *
      * **Lists**
      * -  List
      * -  ListHeader
      * -  Item
      * -  ItemSliding
      *
      * **Slides**
      * -  Slides
      * -  Slide
      * -  SlideLazy
      *
      * **Tabs**
      * -  Tabs
      * -  Tab
      *
      * **Toolbar**
      * -  Toolbar
      * -  ToolbarTitle
      * -  ToolbarItem
      *
      * **Media**
      * -  Icon
      *
      * **Forms**
      * -  Searchbar
      * -  Segment
      * -  SegmentButton
      * -  Checkbox
      * -  RadioGroup
      * -  RadioButton
      * -  Select
      * -  Option
      * -  Toggle
      * -  ItemInput
      * -  TextInput
      * -  Label
      *
      * **Nav**
      * -  Nav
      * -  NavbarTemplate
      * -  Navbar
      * -  NavPush
      * -  NavPop
      * -  NavRouter
      * -  IdRef
      *
      * -  ShowWhen
      * -  HideWhen
      */
    export const IONIC_DIRECTIVES: (Type[] | typeof Menu | typeof MenuToggle | typeof MenuClose | typeof Button | typeof Blur | typeof Content | typeof Scroll | typeof Refresher | typeof List | typeof ListHeader | typeof ItemSliding | typeof Slides | typeof Slide | typeof Tabs | typeof Tab | typeof Toolbar | typeof ToolbarTitle | typeof ToolbarItem | typeof Icon | typeof Searchbar | typeof Segment | typeof SegmentButton | typeof Checkbox | typeof RadioGroup | typeof RadioButton | typeof Select | typeof Toggle | typeof ItemInput | typeof TextInput | typeof Label | typeof Nav | typeof NavbarTemplate | typeof Navbar | typeof NavPush | typeof NavRouter | typeof IdRef | typeof HideWhen)[];
}

declare module 'ionic/ionic/decorators/config-component' {
    /**
      * @private
      */
    export function ConfigComponent(config: any): (cls: any) => any;
}

declare module 'ionic/ionic/decorators/app' {
    /**
     * @name App
     * @description
     * App is an Ionic decorator that bootstraps an application. It can be passed a number of arguments, that act as global config variables for the app.
     * App can accept a `template` property that has an inline template or a `templateUrl` property that points to an external html template.
     *
     * @usage
     * ```ts
     * import {App} from 'ionic/ionic';
     *
     * @App({
     *   templateUrl: 'app/app.html'
     * })
     *
     * export class MyApp{
     *   // Anything we would want to do at the root of our app
     * }
     * ```
     *
     * @param {Object} [config] - the app's [../Config](Config) object
     * @param {String} [template] - the template to use for the app root
     * @param {String} [templateUrl] - a relative URL pointing to the template to use for the app root
     *
     */
    export function App(args?: {}): (cls: any) => any;
}

declare module 'ionic/ionic/decorators/page' {
    /**
      * @name Page
      * @description
      *For more information on how pages are created, see the [NavController API reference](../../components/nav/NavController/#creating_pages)
      *
      * The Page decorator indicates that the decorated class is an Ionic
      * navigation component, meaning it can be navigated to using a NavController.
      *
      * Pages have all `IONIC_DIRECTIVES`, which include all Ionic components and directives,
      * as well as Angular's [CORE_DIRECTIVES](https://angular.io/docs/js/latest/api/core/CORE_DIRECTIVES-const.html)
      * and [FORM_DIRECTIVES](https://angular.io/docs/js/latest/api/core/FORM_DIRECTIVES-const.html),
      * already provided to them, so you only need to supply custom components and directives to your pages:
      *
      * @usage
      *
      * ```ts
      * @Page({
      *   template: `
      *    <ion-content>
      *      I am a page!
      *    </ion-content>
      *   `
      * })
      * class MyPage {}
      * ```
      *
      * Here [Content](../../../components/content/Content/) will load because
      * it is in `IONIC_DIRECTIVES`, so there is no need to add a `directives` array.
      *
      *
      * Say you built a custom component that uses the already existing Ionic component.
      * In this case, you would add `IONIC_DIRECTIVES` to your directives array.
      *
      * ```ts
      * import {IONIC_DIRECTIVES} from 'ionic/ionic';
      * @Component({
      *   selector: 'my-component'
      *   template: `<div class="my-style">
      *   						  <ion-checkbox></ion-checkbox>
      *   						</div>`,
      *   directives: [IONIC_DIRECTIVES]
      * })
      * class MyCustomCheckbox {}
      *```
    
      * Alternatively, you could:
      *
      * ```ts
      * import {Checkbox, Icon} from 'ionic/ionic'
      * ```
      *
      * along with any other components and add them individually:
      *
      * ```
      * @Component({
      *   ...
      *   directives: [Checkbox, Icon]
      * })
      * ```
      *
      * However, using IONIC_DIRECTIVES will always *Just Work* with no
      * performance overhead, so there is really no reason to not always use it.
      *
      * Pages have their content automatically wrapped in `<ion-view>`, so although
      * you may see these tags if you inspect your markup, you don't need to include
      * them in your templates.
      */
    export function Page(config?: {}): (cls: any) => any;
}

declare module 'ionic/ionic/components' {
    export * from 'ionic/ionic/components/app/app';
    export * from 'ionic/ionic/components/app/id';
    export * from 'ionic/ionic/components/action-sheet/action-sheet';
    export * from 'ionic/ionic/components/alert/alert';
    export * from 'ionic/ionic/components/blur/blur';
    export * from 'ionic/ionic/components/button/button';
    export * from 'ionic/ionic/components/checkbox/checkbox';
    export * from 'ionic/ionic/components/content/content';
    export * from 'ionic/ionic/components/icon/icon';
    export * from 'ionic/ionic/components/input/input';
    export * from 'ionic/ionic/components/item/item';
    export * from 'ionic/ionic/components/item/item-sliding';
    export * from 'ionic/ionic/components/menu/menu';
    export * from 'ionic/ionic/components/menu/menu-types';
    export * from 'ionic/ionic/components/menu/menu-toggle';
    export * from 'ionic/ionic/components/menu/menu-close';
    export * from 'ionic/ionic/components/label/label';
    export * from 'ionic/ionic/components/list/list';
    export * from 'ionic/ionic/components/show-hide-when/show-hide-when';
    export * from 'ionic/ionic/components/modal/modal';
    export * from 'ionic/ionic/components/nav/nav';
    export * from 'ionic/ionic/components/nav/nav-controller';
    export * from 'ionic/ionic/components/nav/view-controller';
    export * from 'ionic/ionic/components/nav/nav-push';
    export * from 'ionic/ionic/components/nav/nav-router';
    export * from 'ionic/ionic/components/navbar/navbar';
    export * from 'ionic/ionic/components/option/option';
    export * from 'ionic/ionic/components/overlay/overlay';
    export * from 'ionic/ionic/components/slides/slides';
    export * from 'ionic/ionic/components/radio/radio';
    export * from 'ionic/ionic/components/scroll/scroll';
    export * from 'ionic/ionic/components/scroll/pull-to-refresh';
    export * from 'ionic/ionic/components/searchbar/searchbar';
    export * from 'ionic/ionic/components/segment/segment';
    export * from 'ionic/ionic/components/select/select';
    export * from 'ionic/ionic/components/tabs/tabs';
    export * from 'ionic/ionic/components/tabs/tab';
    export * from 'ionic/ionic/components/tap-click/tap-click';
    export * from 'ionic/ionic/components/text-input/text-input';
    export * from 'ionic/ionic/components/toggle/toggle';
    export * from 'ionic/ionic/components/toolbar/toolbar';
}

declare module 'ionic/ionic/platform/platform' {
    /**
        * @name Platform
        * @description
        * Platform returns the availble information about your current platform.
        * Platforms in Ionic 2 are much more complex then in V1, returns not just a single platform,
        * but a hierarchy of information, such as a devices OS, phone vs tablet, or mobile vs browser.
        * With this information you can completely custimize your app to fit any device and platform.
        *
        * @usage
        * ```ts
        * import {Platform} 'ionic/ionic';
        * export MyClass {
        *    constructor(platform: Platform){
        *      this.platform = platform;
        *    }
        * }
        * ```
        * @demo /docs/v2/demos/platform/
        */
    export class Platform {
            platformOverride: string;
            constructor(platforms?: any[]);
            /**
                * @param {string} platformName
                * @returns {bool} returns true/false based on platform you place
                * @description
                * Depending on the platform name, isPlatform will return true or flase
                *
                * ```
                * import {Platform} 'ionic/ionic';
                * export MyClass {
                *    constructor(platform: Platform){
                *      this.platform = platform;
                *      if(this.platform.is('ios'){
                *        // what ever you need to do for
                *        // if the platfomr is ios
                *      }
                *    }
                * }
                * ```
                */
            is(platformName: any): boolean;
            /**
                * @returns {array} the array of platforms
                * @description
                * Depending on what device you are on, `platforms` can return multiple values.
                * Each possible value is a hierarchy of platforms. For example, on an iPhone,
                * it would return mobile, ios, and iphone.
                *
                * ```
                * import {Platform} 'ionic/ionic';
                * export MyClass {
                *    constructor(platform: Platform){
                *      this.platform = platform;
                *      console.log(this.platform.platforms());
                *      // This will return an array of all the availble platforms
                *      // From if your on mobile, to mobile os, and device name
                *    }
                * }
                * ```
                */
            platforms(): string[];
            /**
                * Returns an object containing information about the paltform
                *
                * ```
                * import {Platform} 'ionic/ionic';
                * export MyClass {
                *    constructor(platform: Platform){
                *      this.platform = platform;
                *      console.log(this.platform.versions());
                *    }
                * }
                * ```
        
                * @param {string} [platformName] optional platformName
                * @returns {object} An object with various platform info
                *
                */
            versions(platformName: any): any;
            /**
                * @private
                */
            version(): any;
            /**
                * Returns a promise when the platform is ready and native functionality can be called
                *
                * ```
                * import {Platform} 'ionic/ionic';
                * export MyClass {
                *    constructor(platform: Platform){
                *      this.platform = platform;
                *      this.platform.ready().then(() => {
                *        console.log('Platform ready');
                *        // The platform is now ready, execute any native code you want
                *       });
                *    }
                * }
                * ```
                * @returns {promise} Returns a promsie when device ready has fired
                */
            ready(): any;
            /**
                * @private
                */
            prepareReady(config: any): void;
            /**
             * Set the app's language direction, which will update the `dir` attribute
             * on the app's root `<html>` element. We recommend the app's `index.html`
             * file already has the correct `dir` attribute value set, such as
             * `<html dir="ltr">` or `<html dir="rtl">`. This method is useful if the
             * direction needs to be dynamically changed per user/session.
             * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
             * @param {string} dir  Examples: `rtl`, `ltr`
             */
            setDir(dir: any, updateDocument: any): void;
            /**
                * Returns app's language direction.
                * We recommend the app's `index.html` file already has the correct `dir`
                * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
                * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
                * @returns {string}
                */
            dir(): string;
            /**
                * Returns if this app is using right-to-left language direction or not.
                * We recommend the app's `index.html` file already has the correct `dir`
                * attribute value set, such as `<html dir="ltr">` or `<html dir="rtl">`.
                * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)
                * @returns {boolean}
                */
            isRTL(): boolean;
            /**
             * Set the app's language and optionally the country code, which will update
             * the `lang` attribute on the app's root `<html>` element.
             * We recommend the app's `index.html` file already has the correct `lang`
             * attribute value set, such as `<html lang="en">`. This method is useful if
             * the language needs to be dynamically changed per user/session.
             * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
             * @param {string} language  Examples: `en-US`, `en-GB`, `ar`, `de`, `zh`, `es-MX`
             */
            setLang(language: any, updateDocument: any): void;
            /**
                * Returns app's language and optional country code.
                * We recommend the app's `index.html` file already has the correct `lang`
                * attribute value set, such as `<html lang="en">`.
                * [W3C: Declaring language in HTML](http://www.w3.org/International/questions/qa-html-language-declarations)
                * @returns {string}
                */
            lang(): string;
            /**
             * @private
             */
            on(): void;
            /**
             * @private
             */
            onHardwareBackButton(): void;
            /**
             * @private
             */
            registerBackButtonAction(): void;
            /**
             * @private
             */
            exitApp(): void;
            /**
             * @private
             */
            fullScreen(): void;
            /**
             * @private
             */
            showStatusBar(): void;
            /**
             * @private
             */
            setUrl(url: any): void;
            /**
             * @private
             */
            url(val: any): string;
            /**
             * @private
             */
            query(key: any): any;
            /**
             * @private
             */
            setUserAgent(userAgent: any): void;
            /**
             * @private
             */
            userAgent(val: any): string;
            /**
             * @private
             */
            setNavigatorPlatform(navigatorPlatform: any): void;
            /**
             * @private
             */
            navigatorPlatform(val: any): string;
            /**
             * @private
             */
            width(): any;
            /**
             * @private
             */
            height(): any;
            /**
             * @private
             */
            isPortrait(): boolean;
            /**
             * @private
             */
            isLandscape(): boolean;
            /**
             * @private
             */
            windowResize(): void;
            /**
             * @private
             */
            onResize(cb: any): void;
            /**
                * @private
                */
            static register(platformConfig: any): void;
            /**
             * @private
             */
            static registry(): {};
            /**
                * @private
                */
            static get(platformName: any): any;
            /**
                * @private
                */
            static setDefault(platformName: any): void;
            /**
                * @private
                */
            testQuery(queryValue: any, queryTestValue: any): boolean;
            /**
                * @private
                */
            testUserAgent(userAgentExpression: any): boolean;
            /**
                * @private
                */
            testNavigatorPlatform(navigatorPlatformExpression: any): boolean;
            /**
                * @private
                */
            matchUserAgentVersion(userAgentExpression: any): {
                    major: string;
                    minor: string;
            };
            /**
                * @private
                */
            isPlatform(queryTestValue: any, userAgentExpression: any): boolean;
            /**
                * @private
                */
            load(platformOverride: any): void;
            /**
                * @private
                */
            matchPlatform(platformName: any): any;
    }
}

declare module 'ionic/ionic/platform/storage' {
    export * from 'ionic/ionic/platform/storage/storage';
    export * from 'ionic/ionic/platform/storage/local-storage';
    export * from 'ionic/ionic/platform/storage/sql';
}

declare module 'ionic/ionic/util/click-block' {
    /**
      * @private
      */
    export class ClickBlock {
        enable(): void;
        show(shouldShow: any, expire: any): void;
    }
}

declare module 'ionic/ionic/util/events' {
    /**
        * Events is a pub/sub style event system for sending and responding to application-level
        * events across your app.
        * @usage
        * ```ts
        * // first page (publish an event when a user is created)
        * function createUser(user) {
        *   console.log('User created!')
        *   events.publish('user:created', user);
        * }
        *
        * // second page (listen for the user created event)
        * events.subscribe('user:created', (user) => {
        *   console.log('Welcome', user);
        * });
        *
        * ```
        */
    export class Events {
            /**
                * Subscribe to an event topic. Events that get posted to that topic
                * will trigger the provided handler.
                *
                * @param topic the topic to subscribe to
                * @param handler the event handler
                */
            subscribe(topic: any, ...handlers: any[]): void;
            /**
                * Unsubscribe from the given topic. Your handler will
                * no longer receive events published to this topic.
                *
                * @param topic the topic to unsubscribe from
                * @param handler the event handler
                *
                * @return true if a handler was removed
                */
            unsubscribe(topic: any, handler: any): boolean;
            /**
                * Publish an event to the given topic.
                *
                * @param topic the topic to publish to
                * @param eventData the data to send as the event
                */
            publish(topic: any, ...args: any[]): any[];
    }
}

declare module 'ionic/ionic/util/keyboard' {
    import { NgZone } from 'angular2/core';
    import { Config } from 'ionic/ionic/config/config';
    import { Form } from 'ionic/ionic/util/form';
    /**
        * @name Keyboard
        * @description
        * The `Keyboard` class allows you to work with the keyboard events provide by the Ionic keyboard plugin.
        *
        * @usage
        * ```ts
        * export class MyClass{
        *  constructor(keyboard: Keyboard){
        *    this.keyboard = keyboard;
        *  }
        * }
        *
        * ```
        */
    export class Keyboard {
            constructor(config: Config, _form: Form, _zone: NgZone);
            /**
                * Chech to see if the keyboard is open or not.
                *
                * ```ts
                * export class MyClass{
                *  constructor(keyboard: Keyboard){
                *    this.keyboard = keyboard;
                *  }
                *  keyboardCheck(){
                *    setTimeout(()  => console.log('is the keyboard open ', this.keyboard.isOpen()));
                *  }
                * }
                *
                * ```
                *
                * @return {Bool} returns a true or flase value if the keyboard is open or not
                */
            isOpen(): boolean;
            /**
                * When the keyboard is closed, call any methods you want
                *
                * ```ts
                * export class MyClass{
                *  constructor(keyboard: Keyboard){
                *    this.keyboard = keyboard;
                *    this.keyboard.onClose(this.closeCallback);
                *  }
                *  closeCallback(){
                *     // call what ever functionality you want on keyboard close
                *     console.log('Closing time");
                *  }
                * }
                *
                * ```
                * @param {Function} callback method you want to call when the keyboard has been closed
                * @return {Function} returns a callback that gets fired when the keyboard is closed
                */
            onClose(callback: any, pollingInternval?: number): any;
            /**
                * Progamatically close they keyboard
                *
                */
            close(): void;
            /**
                * @private
                */
            focusOutline(setting: any, document: any): void;
    }
}

declare module 'ionic/ionic/animations/animation' {
    /**
        * @private
     **/
    export class Animation {
            isProgress: boolean;
            constructor(ele: any, opts?: {});
            reset(): void;
            elements(ele: any): this;
            addElement(ele: any): void;
            parent(parentAnimation: any): this;
            add(childAnimations: any): this;
            duration(value: any): any;
            clearDuration(): void;
            easing(name: any, opts: any): any;
            playbackRate(value: any): any;
            reverse(): any;
            forward(): any;
            from(property: any, value: any): this;
            to(property: any, value: any): this;
            fromTo(property: any, from: any, to: any): this;
            fadeIn(): this;
            fadeOut(): this;
            before: {
                    addClass: (className: any) => this;
                    removeClass: (className: any) => this;
                    setStyles: (styles: any) => this;
            };
            after: {
                    addClass: (className: any) => this;
                    removeClass: (className: any) => this;
            };
            play(done: any): any;
            stage(): void;
            _onPlay(): void;
            _onFinish(): void;
            pause(): void;
            progressStart(): void;
            progress(value: any): void;
            /**
                * Get the current time of the first animation
                * in the list. To get a specific time of an animation, call
                * subAnimationInstance.getCurrentTime()
                */
            getCurrentTime(): any;
            progressEnd(shouldComplete: any, rate?: number): Promise<any[]>;
            onReady(fn: any, clear: any): this;
            onPlay(fn: any, clear: any): this;
            onFinish(fn: any, clear: any): this;
            clone(): any;
            dispose(removeElement: any): void;
            static create(element: any, name: any): any;
            static createTransition(enteringView: any, leavingView: any, opts?: {}): any;
            static register(name: any, AnimationClass: any): void;
    }
}

declare module 'ionic/ionic/translation/translate' {
    /**
      * @private
      * Provide multi-language and i18n support in your app. Translate works by
      * mapping full strings to language translated ones. That means that you don't
      * need to provide strings for your default language, just new languages.
      *
      * Note: The Angular team will be building an
      * [Localization/Internationalization](https://docs.google.com/document/d/1mwyOFsAD-bPoXTk3Hthq0CAcGXCUw-BtTJMR4nGTY-0/view#heading=h.ixg45w3363q)
      * provider, so this Translation provider may not be further developed.
      *
      * @usage
      * ```js
      * Translate.translations({
      *   'de': {
      *     'Welcome to MyApp': 'Willkommen auf'
      *   }
      * })
      *
      * Changing the default language:
      *
      * Translate.setLanguage('de');
      * ```
      *
      * Usage in a template:
      *
      * ```js
      * <span>{{ 'Welcome to MyApp' | translate }}
      * ```
      */
    export class Translate {
        translations(lang: any, map: any): void;
        setLanguage(lang: any): void;
        getTranslations(lang: any): any;
        translate(key: any, lang: any): any;
        _getTranslation(map: any, key: any): any;
    }
}

declare module 'ionic/ionic/translation/translate_pipe' {
    import { PipeTransform } from 'angular2/core';
    import { Translate } from 'ionic/ionic/translation/translate';
    /**
      * @private
      * The Translate pipe makes it easy to translate strings.
      *
      * @usage
      * Translate using the current language or language set through Translate.setLanguage
      * {{ 'Please enter your location' | translate }}
      *
      * Translate using a specific language
      * {{ 'Please enter your location' | translate:"de" }}
      */
    export class TranslatePipe implements PipeTransform {
        constructor(translate: Translate);
        transform(value: any, args: any): any;
        supports(obj: any): boolean;
    }
}

declare module 'ionic/ionic/components/app/app' {
    import { NgZone } from 'angular2/core';
    import { Config } from 'ionic/ionic/config/config';
    import { ClickBlock } from 'ionic/ionic/util/click-block';
    /**
        * @private
        * Component registry service.  For more information on registering
        * components see the [IdRef API reference](../id/IdRef/).
        */
    export class IonicApp {
            constructor(_config: Config, _clickBlock: ClickBlock, _zone: NgZone);
            /**
                * Sets the document title.
                * @param {string} val  Value to set the document title to.
                */
            setTitle(val: any): void;
            /**
                * @private
                * Sets if the app is currently enabled or not, meaning if it's
                * available to accept new user commands. For example, this is set to `false`
                * while views transition, a modal slides up, an action-sheet
                * slides up, etc. After the transition completes it is set back to `true`.
                * @param {bool} isEnabled
                * @param {bool} fallback  When `isEnabled` is set to `false`, this argument
                * is used to set the maximum number of milliseconds that app will wait until
                * it will automatically enable the app again. It's basically a fallback incase
                * something goes wrong during a transition and the app wasn't re-enabled correctly.
                */
            setEnabled(isEnabled: any, duration?: number): void;
            /**
                * @private
                * Boolean if the app is actively enabled or not.
                * @return {bool}
                */
            isEnabled(): boolean;
            /**
                * @private
                */
            setScrolling(): void;
            /**
                * @private
                * Boolean if the app is actively scrolling or not.
                * @return {bool}
                */
            isScrolling(): boolean;
            /**
                * @private
                * Register a known component with a key, for easy lookups later.
                * @param {TODO} id  The id to use to register the component
                * @param {TODO} component  The component to register
                */
            register(id: any, component: any): void;
            /**
                * @private
                * Unregister a known component with a key.
                * @param {TODO} id  The id to use to unregister
                */
            unregister(id: any): void;
            /**
                * @private
                * Get a registered component with the given type (returns the first)
                * @param {Object} cls the type to search for
                * @return the matching component, or undefined if none was found
                */
            getRegisteredComponent(cls: any): any;
            /**
                * @private
                * Get the component for the given key.
                * @param {TODO} key  TODO
                * @return {TODO} TODO
                */
            getComponent(id: any): any;
    }
}

declare module 'ionic/ionic/util/form' {
    /**
        * The Input component is used to focus text input elements.
        *
        * @usage
        * ```html
        * <ion-input>
        *   <ion-label>Name</ion-label>
        *   <input value="Name" type="text">
        * </ion-input>
        * ```
        */
    export class Form {
            constructor();
            register(input: any): void;
            deregister(input: any): void;
            focusCtrl(document: any): void;
            focusOut(): void;
            setAsFocused(input: any): void;
            /**
                * Focuses the next input element, if it exists.
                */
            focusNext(currentInput: any): any;
            nextId(): number;
    }
}

declare module 'ionic/ionic/components/tap-click/tap-click' {
    import { NgZone } from 'angular2/core';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Config } from 'ionic/ionic/config/config';
    /**
        * @private
        */
    export class TapClick {
            constructor(app: IonicApp, config: Config, zone: NgZone);
            touchStart(ev: any): void;
            touchEnd(ev: any): void;
            mouseDown(ev: any): void;
            mouseUp(ev: any): void;
            pointerStart(ev: any): void;
            pointerEnd(ev: any): void;
            pointerCancel(ev: any): void;
            moveListeners(shouldAdd: any): void;
            click(ev: any): void;
            isDisabledNativeClick(): boolean;
    }
    /**
        * @private
        */
    export function isActivatable(ele: any): boolean;
}

declare module 'ionic/ionic/components/menu/menu' {
    import { ElementRef, NgZone } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Config } from 'ionic/ionic/config/config';
    import { Platform } from 'ionic/ionic/platform/platform';
    import { Keyboard } from 'ionic/ionic/util/keyboard';
    /**
        * @name Menu
        * @description
        * _For basic Menu usage, see the [Menu section](../../../../components/#menus)
        * of the Component docs._
        *
        * Menu is a side-menu navigation that can be dragged out or toggled to show.
        *
        * @usage
        * In order to use Menu, you must specify a [reference](https://angular.io/docs/ts/latest/guide/user-input.html#local-variables)
        * to the content element that Menu should listen on for drag events, using the `content` property:
        *
        * ```html
        * <ion-menu [content]="mycontent">
        *   <ion-content>
        *     <ion-list>
        *     ...
        *     </ion-list>
        *   </ion-content>
        * </ion-menu>
        *
        * <ion-nav #mycontent [root]="rootPage"></ion-nav>
        * ```
        *
        * By default, Menus are on the left, but this can be overriden with the `side`
        * property:
        * ```html
        * <ion-menu [content]="mycontent" side="right"></ion-menu>
        * ```
        *
        * Menus can optionally be given an `id` attribute which allows the app to
        * to get ahold of menu references. If no `id` is given then the menu
        * automatically receives an `id` created from the side it is on, such as
        * `leftMenu` or `rightMenu`. When using more than one menu it is always
        * recommended to give each menu a unique `id`. Additionally menuToggle and
        * menuClose directives should be given menu id values of their respective
        * menu.
        *
        * Menu supports two display styles: overlay, and reveal. Overlay
        * is the traditional Android drawer style, and Reveal is the traditional iOS
        * style. By default, Menu will adjust to the correct style for the platform,
        * but this can be overriden using the `type` property:
        * ```html
        * <ion-menu [content]="mycontent" type="overlay"></ion-menu>
        * ```
        *
        * To programatically interact with the menu, you first get the menu component.
        *
        * ```ts
        * @Page({
        * `<ion-menu [content]="mycontent" id="leftMenu"></ion-menu>
        * <ion-nav #mycontent [root]="rootPage"></ion-nav>`
        * )}
        * export class MyClass{
        *  constructor(app: IonicApp){
        *    this.app = app;
        *    this.menu;
        *  }
        *
        *  // Wait until the page is ready
        *  ngAfterViewInit(){
        *    this.menu = this.app.getComponent('leftMenu');
        *  }
        *
        *  // Open the menu programatically
        *  openMenu(){
        *    this.menu.open();
        *  }
        *
        * }
        * ```
        *
        * If you want to use any of the APIs down below, make sure to grabe the menu component by it's ID
        *
        * @demo /docs/v2/demos/menu/
        *
        * @see {@link /docs/v2/components#menus Menu Component Docs}
        * @see {@link /docs/v2/components#navigation Navigation Component Docs}
        * @see {@link ../../nav/Nav Nav API Docs}
        *
        */
    export class Menu extends Ion {
            constructor(elementRef: ElementRef, config: Config, app: IonicApp, platform: Platform, keyboard: Keyboard, zone: NgZone);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            _initGesture(): void;
            /**
                * @private
                */
            _initType(type: any): void;
            /**
                * @private
                */
            _getType(): any;
            /**
                * Sets the state of the Menu to open or not.
                * @param {boolean} isOpen  If the Menu is open or not.
                * @return {Promise} returns a promise once set
                */
            setOpen(shouldOpen: any): any;
            /**
                * @private
                */
            setProgressStart(): void;
            /**
                * @private
                */
            setProgess(value: any): void;
            /**
                * @private
                */
            setProgressEnd(shouldComplete: any): void;
            /**
                * @private
                */
            _before(): void;
            /**
                * @private
                */
            _after(isOpen: any): void;
            /**
                * @private
                */
            _prevent(): void;
            /**
                * @private
                */
            _isPrevented(): boolean;
            /**
                * Progamatically open the Menu
                * @return {Promise} returns a promise when the menu is fully opened
                */
            open(): any;
            /**
                * Progamatically close the Menu
                * @return {Promise} returns a promise when the menu is fully closed
                */
            close(): any;
            /**
                * Toggle the menu. If it's closed, it will open, and if opened, it will close
                * @return {Promise} returns a promise when the menu has been toggled
                */
            toggle(): any;
            /**
                * Used to enable or disable a menu. For example, there could be multiple
                * left menus, but only one of them should be able to be dragged open.
                * @param {boolean} shouldEnable  True if it should be enabled, false if not.
                * @return {Menu}  Returns the instance of the menu, which is useful for chaining.
                */
            enable(shouldEnable: any): this;
            /**
                * @private
                */
            getMenuElement(): any;
            /**
                * @private
                */
            getContentElement(): any;
            /**
                * @private
                */
            getBackdropElement(): any;
            /**
                * @private
                */
            static register(name: any, cls: any): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
            static getById(app: any, menuId: any): any;
    }
}

declare module 'ionic/ionic/components/menu/menu-toggle' {
    import { ElementRef } from 'angular2/core';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    import { Navbar } from 'ionic/ionic/components/navbar/navbar';
    /**
     * @name MenuToggle
     * @description
     * Toggle a menu by placing this directive on any item.
     * Note that the menu's id must be either `leftMenu` or `rightMenu`
     *
     * @usage
      * ```html
      *<ion-content>
      *  <h3>Page 1</h3>
      *  <button menuToggle>Toggle Menu</button>
      *</ion-content>
      *
      * ```
     * @demo /docs/v2/demos/menu/
     * @see {@link /docs/v2/components#menus Menu Component Docs}
     * @see {@link ../../menu/Menu Menu API Docs}
     */
    export class MenuToggle {
        constructor(app: IonicApp, elementRef: ElementRef, viewCtrl: ViewController, navbar: Navbar);
        /**
         * @private
         */
        toggle(): void;
        /**
         * @private
         */
        isHidden: boolean;
    }
}

declare module 'ionic/ionic/components/menu/menu-close' {
    import { IonicApp } from 'ionic/ionic/components/app/app';
    /**
     * @name MenuClose
     * @description
     * Place `menuClose` on a button to automatically close an open menu. Note that the menu's id must be either
     * `leftMenu` or `rightMenu`
     *
     * @usage
      * ```html
      * <ion-menu [content]="mycontent" id="leftMenu">
      *   <ion-content>
      *     <ion-list>
      *     <ion-item menuClose>Close the menu</ion-item>
      *     </ion-list>
      *   </ion-content>
      * </ion-menu>
      *
      * <ion-nav #mycontent [root]="rootPage"></ion-nav>
      * ```
     * @demo /docs/v2/demos/menu/
     * @see {@link /docs/v2/components#menus Menu Component Docs}
     * @see {@link ../../menu/Menu Menu API Docs}
     */
    export class MenuClose {
        constructor(_app: IonicApp);
        /**
         * @private
         */
        close(): void;
    }
}

declare module 'ionic/ionic/components/button/button' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { Config } from 'ionic/ionic/config/config';
    /**
         * @name Button
         * @module ionic
         * @property [outline] - for an unfilled outline button
         * @property [clear] - for a transparent button that only shows text and icons
         * @property [round] - for a button with rounded corners
         * @property [block] - for a block button that fills it's parent container
         * @property [full] - for a full width button
         * @property [small] - sets button size to small
         * @property [large] - sets button size to large
         * @property [disabled] - disables the button
         * @property [fab] - for a floating action button
         * @property [fab-left] - position a fab button to the left
         * @property [fab-right] - position a fab button to the right
         * @property [fab-center] - position a fab button towards the center
         * @property [fab-top] - position a fab button towards the top
         * @property [fab-bottom] - position a fab button towards the bottom
         * @property [color] - Dynamically set which color attribute this button should use.
         * @description
         * Buttons are simple components in Ionic, can consist of text, an icon, or both, and can be enhanced with a wide range of attributes.
         * @demo /docs/v2/demos/buttons/
         * @see {@link /docs/v2/components#buttons Button Component Docs}
    
        */
    export class Button {
            constructor(config: Config, _elementRef: ElementRef, _renderer: Renderer, ionItem: string);
            /**
                * @private
                */
            ngAfterContentInit(): void;
            /**
                * @private
                */
            ngAfterContentChecked(): void;
            /**
                * @private
                */
            addClass(className: any): void;
            /**
                * @private
                */
            setRole(val: any): void;
            _readIcon(element: any): void;
            _readAttrs(element: any): void;
            _assignCss(assignCssClass: any): void;
            _setClass(type: any, assignCssClass: any): void;
            /**
                * @private
                */
            static setRoles(contentButtonChildren: any, role: any): void;
    }
}

declare module 'ionic/ionic/components/blur/blur' {
    import { Renderer, ElementRef } from 'angular2/core';
    /**
      * @name Blur
      * @description
      * The blur attribute applies the CSS blur attribute to an element. If the CSS attribute is not supported,
      * it will fall back to applying a semi-transparent background color to the element.
      *
      * @usage
      * ```html
      * <ion-card blur>
      *    This card will blur the content behind it.
      * </ion-card>
      * ```
      *
      * @demo /docs/v2/demos/blur/
      */
    export class Blur {
        constructor(_elementRef: ElementRef, _renderer: Renderer);
    }
}

declare module 'ionic/ionic/components/content/content' {
    import { ElementRef, NgZone } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Config } from 'ionic/ionic/config/config';
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name Content
        * @description
        * The Content component provides an easy to use content area that can be configured to use Ionic's custom Scroll View, or the built in overflow scrolling of the browser.
        *
        * While we recommend using the custom Scroll features in Ionic in most cases, sometimes (for performance reasons) only the browser's native overflow scrolling will suffice, and so we've made it easy to toggle between the Ionic scroll implementation and overflow scrolling.
        *
        * You can implement pull-to-refresh with the [Refresher](../../scroll/Refresher) component.
        *
        * @usage
        * ```html
        * <ion-content id="myContent">
        *   Add your content here!
        * </ion-content>
        * ```
        *
        */
    export class Content extends Ion {
            /**
                * @param {ElementRef} elementRef  A reference to the component's DOM element.
                * @param {Config} config  The config object to change content's default settings.
                */
            constructor(elementRef: ElementRef, _config: Config, viewCtrl: ViewController, _app: IonicApp, _zone: NgZone);
            /**
                * @private
                */
            ngOnInit(): void;
            ngOnDestroy(): void;
            /**
                * Adds the specified scroll handler to the content' scroll element.
                *
                * ```ts
                * @Page({
                *   template: `<ion-content id="my-content"></ion-content>`
                * )}
                * export class MyPage{
                *    constructor(app: IonicApp){
                *        this.app = app;
                *    }
                *   // Need to wait until the component has been initialized
                *   ngAfterViewInit() {
                *     // Here 'my-content' is the ID of my ion-content
                *     this.content = this.app.getComponent('my-content');
                *     this.content.addScrollEventListener(this.myScroll);
                *   }
                *     myScroll() {
                *      console.info('They see me scrolling...');
                *    }
                * }
                * ```
                * @param {Function} handler  The method you want perform when scrolling
                * @returns {Function} A function that removes the scroll handler.
                */
            addScrollEventListener(handler: any): () => void;
            onScrollEnd(callback: any): void;
            /**
                * Adds the specified touchmove handler to the content's scroll element.
                *
                * ```ts
                * @Page({
                *   template: `<ion-content id="my-content"></ion-content>`
                * )}
                * export class MyPage{
                *    constructor(app: IonicApp){
                *        this.app = app;
                *    }
                *   // Need to wait until the component has been initialized
                *   ngAfterViewInit() {
                *     // Here 'my-content' is the ID of my ion-content
                *     this.content = this.app.getComponent('my-content');
                *     this.content.addTouchMoveListener(this.touchHandler);
                *   }
                *    touchHandler() {
                *      console.log("I'm touching all the magazines!!");
                *    }
                * }
                * ```
                * @param {Function} handler  The method you want to perform when touchmove is firing
                * @returns {Function} A function that removes the touchmove handler.
                */
            addTouchMoveListener(handler: any): () => void;
            /**
                * Scroll to the specified position.
                *
                * ```ts
                * @Page({
                *   template: `<ion-content id="my-content">
                *      <button (click)="scrollTo()"> Down 500px</button>
                *   </ion-content>`
                * )}
                * export class MyPage{
                *    constructor(app: IonicApp){
                *        this.app = app;
                *    }
                *   // Need to wait until the component has been initialized
                *   ngAfterViewInit() {
                *     // Here 'my-content' is the ID of my ion-content
                *     this.content = this.app.getComponent('my-content');
                *   }
                *    scrollTo() {
                *      this.content.scrollTo(0, 500, 200);
                *    }
                * }
                * ```
                * @param {Number} x  The x-value to scroll to.
                * @param {Number} y  The y-value to scroll to.
                * @param {Number} duration  Duration of the scroll animation in ms.
                * @param {TODO} tolerance  TODO
                * @returns {Promise} Returns a promise when done
                */
            scrollTo(x: any, y: any, duration: any, tolerance: any): any;
            /**
                * Scroll to the specified position.
                *
                * ```ts
                * @Page({
                *   template: `<ion-content id="my-content">
                *      <button (click)="scrollTop()"> Down 500px</button>
                *   </ion-content>`
                * )}
                * export class MyPage{
                *    constructor(app: IonicApp){
                *        this.app = app;
                *    }
                *   // Need to wait until the component has been initialized
                *   ngAfterViewInit() {
                *     // Here 'my-content' is the ID of my ion-content
                *     this.content = this.app.getComponent('my-content');
                *   }
                *    scrollTop() {
                *      this.content.scrollTop();
                *    }
                * }
                * ```
                * @returns {Promise} Returns a promise when done
                */
            scrollToTop(): any;
            /**
                * @private
                * Returns the content and scroll elements' dimensions.
                * @returns {Object} dimensions  The content and scroll elements' dimensions
                * {Number} dimensions.contentHeight  content offsetHeight
                * {Number} dimensions.contentTop  content offsetTop
                * {Number} dimensions.contentBottom  content offsetTop+offsetHeight
                * {Number} dimensions.contentWidth  content offsetWidth
                * {Number} dimensions.contentLeft  content offsetLeft
                * {Number} dimensions.contentRight  content offsetLeft + offsetWidth
                * {Number} dimensions.scrollHeight  scroll scrollHeight
                * {Number} dimensions.scrollTop  scroll scrollTop
                * {Number} dimensions.scrollBottom  scroll scrollTop + scrollHeight
                * {Number} dimensions.scrollWidth  scroll scrollWidth
                * {Number} dimensions.scrollLeft  scroll scrollLeft
                * {Number} dimensions.scrollRight  scroll scrollLeft + scrollWidth
                */
            getDimensions(): {
                    contentHeight: any;
                    contentTop: any;
                    contentBottom: any;
                    contentWidth: any;
                    contentLeft: any;
                    contentRight: any;
                    scrollHeight: any;
                    scrollTop: any;
                    scrollBottom: any;
                    scrollWidth: any;
                    scrollLeft: any;
                    scrollRight: any;
            };
            /**
                * @private
                * Adds padding to the bottom of the scroll element when the keyboard is open
                * so content below the keyboard can be scrolled into view.
                */
            addScrollPadding(newScrollPadding: any): void;
    }
}

declare module 'ionic/ionic/components/scroll/scroll' {
    import { ElementRef } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { Config } from 'ionic/ionic/config/config';
    /**
        * @name Scroll
        * @description
        * Scroll is a non-flexboxed scroll area that can scroll horizontally or vertically. `ion-Scroll` Can be used in places were you may not need a full page scroller, but a highly customized one, such as image scubber or comment scroller.
        * @usage
        * ```html
        * <ion-scroll scroll-x="true">
        * </ion-scroll>
        *
        * <ion-scroll scroll-y="true">
        * </ion-scroll>
        *
        * <ion-scroll scroll-x="true" scroll-y="true">
        * </ion-scroll>
        * ```
        *@property {boolean} [scroll-x] - whether to enable scrolling along the X axis
        *@property {boolean} [scroll-y] - whether to enable scrolling along the Y axis
        *@property {boolean} [zoom] - whether to enable zooming
        *@property {number} [max-zoom] - set the max zoom amount for ion-scroll
        * @demo /docs/v2/demos/scroll/
        */
    export class Scroll extends Ion {
            constructor(elementRef: ElementRef, Config: Config);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * Add a scroll event handler to the scroll element if it exists.
                * @param {Function} handler  The scroll handler to add to the scroll element.
                * @returns {?Function} a function to remove the specified handler, otherwise
                * undefined if the scroll element doesn't exist.
                */
            addScrollEventListener(handler: any): () => void;
    }
}

declare module 'ionic/ionic/components/scroll/pull-to-refresh' {
    import { ElementRef } from 'angular2/core';
    import { Content } from 'ionic/ionic/components/content/content';
    /**
        * @name Refresher
        * @description
        * Allows you to add pull-to-refresh to an Content component.
        * Place it as the first child of your Content or Scroll element.
        *
        * When refreshing is complete, call `refresher.complete()` from your controller.
        *
        *  @usage
        *  ```html
        *  <ion-content>
        *    <ion-refresher (starting)="doStarting()"
        *                   (refresh)="doRefresh($event, refresher)"
        *                   (pulling)="doPulling($event, amt)">
        *    </ion-refresher>
        *
        *  </ion-content>
    
        *  ```
        *
        *  ```ts
        *  export class MyClass {
        *  constructor(){}
        *    doRefresh(refresher) {
        *      console.log('Refreshing!', refresher);
        *
        *      setTimeout(() => {
        *        console.log('Pull to refresh complete!', refresher);
        *        refresher.complete();
        *      })
        *    }
        *
        *    doStarting() {
        *      console.log('Pull started!');
        *    }
        *
        *    doPulling(amt) {
        *      console.log('You have pulled', amt);
        *    }
        *  }
        *  ```
        *  @demo /docs/v2/demos/refresher/
        *
        *  @property {string} [pullingIcon] - the icon you want to display when you begin to pull down
        *  @property {string} [pullingText] - the text you want to display when you begin to pull down
        *  @property {string} [refreshingIcon] - the icon you want to display when performing a refresh
        *  @property {string} [refreshingText] - the text you want to display when performing a refresh
        *
        *  @property {any} (refresh) - the methond on your class you want to perform when you refreshing
        *  @property {any} (starting) - the methond on your class you want to perform when you start pulling down
        *  @property {any} (pulling) - the methond on your class you want to perform when you are pulling down
        *
        */
    export class Refresher {
            /**
                * @private
                * @param {Content} content  TODO
                * @param {ElementRef} elementRef  TODO
                */
            constructor(content: Content, element: ElementRef);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                * Initialize touch and scroll event listeners.
                */
            initEvents(): void;
            /**
                * @private
                */
            onDehydrate(): void;
            /**
                * @private
                * @param {TODO} val  TODO
                */
            overscroll(val: any): void;
            /**
                * @private
                * @param {TODO} target  TODO
                * @param {TODO} newScrollTop  TODO
                */
            nativescroll(target: any, newScrollTop: any): void;
            /**
                * @private
                * @param {TODO} enabled  TODO
                */
            setScrollLock(enabled: any): void;
            /**
                * @private
                */
            activate(): void;
            /**
                * @private
                */
            deactivate(): void;
            /**
                * @private
                */
            start(): void;
            /**
                * @private
                */
            show(): void;
            /**
                * @private
                */
            hide(): void;
            /**
                * @private
                */
            tail(): void;
            /**
                * @private
                */
            complete(): void;
            /**
                * @private
                * @param {TODO} Y  TODO
                * @param {TODO} duration  TODO
                * @param {Function} callback  TODO
                */
            scrollTo(Y: any, duration: any, callback: any): void;
            /**
                * @private
                * TODO
                * @param {Event} e  TODO
                */
            _handleTouchMove(e: any): void;
            /**
                * @private
                * TODO
                * @param {Event} e  TODO
                */
            _handleTouchEnd(e: any): void;
            /**
                * @private
                * TODO
                * @param {Event} e  TODO
                */
            _handleScroll(e: any): void;
    }
}

declare module 'ionic/ionic/components/slides/slides' {
    import { ElementRef, EventEmitter } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { Config } from 'ionic/ionic/config/config';
    /**
        * @name Slides
        * @description
        * Slides is a slide box implementation based on Swiper.js
        *
        * Swiper.js:
        * The most modern mobile touch slider and framework with hardware accelerated transitions
        *
        * http://www.idangero.us/swiper/
        *
        * Copyright 2015, Vladimir Kharlampidi
        * The iDangero.us
        * http://www.idangero.us/
        *
        * Licensed under MIT
        *
        * @usage
        * ```ts
        * @Page({
        *  template: `
        *     <ion-slides pager (change)="onSlideChanged($event)" loop="true" autoplay="true">
        *      <ion-slide>
        *        <h3>Thank you for choosing the Awesome App!</h3>
        *        <p>
        *          The number one app for everything awesome.
        *        </p>
        *      </ion-slide>
        *      <ion-slide>
        *        <h3>Using Awesome</h3>
        *         <div id="list">
        *           <h5>Just three steps:</h5>
        *           <ol>
        *             <li>Be awesome</li>
        *             <li>Stay awesome</li>
        *             <li>There is no step 3</li>
        *           </ol>
        *         </div>
        *      </ion-slide>
        *      <ion-slide>
        *        <h3>Any questions?</h3>
        *      </ion-slide>
        *    </ion-slides>
        *    `
        *})
        *
        *```
        * @property {Boolean} [autoplay] - whether or not the slides should automatically change
        * @property {Boolean} [loop] - whether the slides should loop from the last slide back to the first
        * @property {Boolean} [bounce] - whether the slides should bounce
        * @property {Number} [index] - The slide index to start on
        * @property [pager] - add this property to enable the slide pager
        * @property {Any} [change] - expression to evaluate when a slide has been changed
        * @demo /docs/v2/demos/slides/
        * @see {@link /docs/v2/components#slides Slides Component Docs}
        */
    export class Slides extends Ion {
            change: EventEmitter<any>;
            /**
                * @private
                * @param {ElementRef} elementRef  TODO
                */
            constructor(elementRef: ElementRef, config: Config);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            onTap(swiper: any, e: any): void;
            /**
                * @private
                */
            onClick(swiper: any, e: any): void;
            /**
                * @private
                */
            onDoubleTap(swiper: any, e: any): void;
            /**
                * @private
                */
            onLazyImageLoad(swiper: any, slide: any, img: any): void;
            /**
                * @private
                */
            onLazyImageReady(swiper: any, slide: any, img: any): void;
            /**
                * @private
                */
            initZoom(): void;
            /**
                * @private
                */
            resetZoom(): void;
            /**
                * @private
                */
            toggleZoom(swiper: any, e: any): void;
            /**
                * @private
                */
            onTransitionStart(swiper: any): void;
            /**
                * @private
                */
            onTransitionEnd(swiper: any): void;
            /**
                * @private
                */
            onTouchStart(e: any): void;
            /**
                * @private
                */
            onTouchMove(e: any): boolean;
            /**
                * @private
                */
            onTouchEnd(e: any): void;
            /**
                * @private
                * Update the underlying slider implementation. Call this if you've added or removed
                * child slides.
                */
            update(): void;
            /**
                * @private
                */
            next(): void;
            /**
                * @private
                */
            prev(): void;
            /**
                * @private
                */
            getIndex(): any;
            /**
                * @private
                */
            getNumSlides(): any;
            /**
                * @private
                */
            isAtEnd(): any;
            /**
                * @private
                */
            isAtBeginning(): any;
            /**
                * @private
                */
            getSliderWidget(): any;
    }
    /**
        * @private
        */
    export class Slide {
            /**
                * TODO
                * @param {Slides} slides  The containing slidebox.
                * @param {ElementRef} elementRef  TODO
                */
            constructor(elementRef: ElementRef, slides: Slides);
    }
    /**
        * @private
        */
    export class SlideLazy {
            constructor(elementRef: ElementRef);
    }
}

declare module 'ionic/ionic/components/tabs/tabs' {
    import { ElementRef } from 'angular2/core';
    import { EventEmitter } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { Config } from 'ionic/ionic/config/config';
    import { Platform } from 'ionic/ionic/platform/platform';
    import { NavController } from 'ionic/ionic/components/nav/nav-controller';
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name Tabs
        * @property {any} [tabbarPlacement] - set position of the tabbar, top or bottom
        * @property {any} [tabbarIcons] - set the position of the tabbar's icons: top, bottom, left, right, hide
        * @property {any} [preloadTabs] - sets whether to preload all the tabs, true or false
        * @usage
     * ```html
        * <ion-tabs>
        *   <ion-tab [root]="tabRoot"></ion-tab>
        * </ion-tabs>
        * ```
        * @description
        * _For basic Tabs usage, see the [Tabs section](../../../../components/#tabs)
        * of the Component docs._
        *
        * The Tabs component is a container with a TabBar and any number of
        * individual Tab components. On iOS, the TabBar is placed on the bottom of
        * the screen, while on Android it is at the top.
        *
        * @see {@link /docs/v2/components#tabs Tabs Component Docs}
        * @see {@link ../Tab Tab API Docs}
        */
    export class Tabs extends Ion {
            change: EventEmitter<any>;
            /**
                * Hi, I'm "Tabs". I'm really just another Page, with a few special features.
                * "Tabs" can be a sibling to other pages that can be navigated to, which those
                * sibling pages may or may not have their own tab bars (doesn't matter). The fact
                * that "Tabs" can happen to have children "Tab" classes, and each "Tab" can have
                * children pages with their own "ViewController" instance, as nothing to do with the
                * point that "Tabs" is itself is just a page with its own instance of ViewController.
                */
            constructor(config: Config, elementRef: ElementRef, viewCtrl: ViewController, navCtrl: NavController, _platform: Platform);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            add(tab: any): boolean;
            /**
                * @param {Number} index Index of the tab you want to select
                */
            select(tabOrIndex: any): any;
            /**
                * @param {Number} index Index of the tab you want to get
                * @returns {Any} Tab Returs the tab who's index matches the one passed
                */
            getByIndex(index: any): any;
            /**
                * @return {Any} Tab Returns the currently selected tab
                */
            getSelected(): any;
            /**
                * @private
                */
            getIndex(tab: any): any;
            /**
                * @private
                * "Touch" the active tab, going back to the root view of the tab
                * or optionally letting the tab handle the event
                */
            _touchActive(tab: any): any;
            /**
                * Returns the root NavController. Returns `null` if Tabs is not
                * within a NavController.
                * @returns {NavController}
                */
            rootNav: any;
    }
}

declare module 'ionic/ionic/components/tabs/tab' {
    import { ChangeDetectorRef, ElementRef, Compiler, AppViewManager, NgZone, Renderer } from 'angular2/core';
    import { EventEmitter } from 'angular2/core';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Config } from 'ionic/ionic/config/config';
    import { Keyboard } from 'ionic/ionic/util/keyboard';
    import { NavController } from 'ionic/ionic/components/nav/nav-controller';
    import { Tabs } from 'ionic/ionic/components/tabs/tabs';
    /**
        * @name Tab
        * @usage
        * ```html
        * <ion-tabs>
        * 	 <ion-tab tabTitle="Home" tabIcon="home" [root]="tabOneRoot"></ion-tab>
        * 	 <ion-tab tabTitle="Login" tabIcon="star" [root]="tabTwoRoot"></ion-tab>
        * </ion-tabs>
        * ```
        *
        * @description
        * _For basic Tabs usage, see the [Tabs section](../../../../components/#tabs)
        * of the Component docs._
        *
        * Tab components are basic navigation controllers used with Tabs.  Much like
        * Nav, they are a subclass of NavController and can be used to navigate
        * to pages in and manipulate the navigation stack of a particular tab.
        *
        * For more information on using navigation controllers like Tab or [Nav](../../nav/Nav/),
        * take a look at the [NavController API reference](../NavController/).
        *
        * See the [Tabs API reference](../Tabs/) for more details on configuring Tabs
        * and the TabBar.
        *
        * For most cases, you can give tab a `[root]` property along with the component you want to load.
        *
        * ```html
        * <ion-tabs>
        *  <ion-tab [root]="chatRoot"><ion-tab>
        * </ion-tabs>
        * ```
        *
        * ```ts
        * import {Chat} from '../chat/chat';
        * export class Tabs {
        *    constructor(){
        *      // here we'll set the property of chatRoot to
        *      // the imported class of Chat
        *      this.chatRoot = Chat
        *    }
        * }
        * ```
        *
        * In other cases, you may not want to navigate to a new component, but just
        * call a method. You can use the `(select)` event to call a method on your
        * class. Below is an example of presenting a modal from one of the tabs.
        *
        * ```html
        * <ion-tabs preloadTabs="false">
        *   <ion-tab (select)="chat()"></ion-tab>
        * </ion-tabs>
        * ```
        *
        * ```ts
        * export class Tabs {
        *   constructor(nav: NavController){
        *     this.nav = nav;
        *   }
        *   chat() {
        *     let modal = Modal.create(ChatPage);
        *     this.nav.present(modal);
        *   }
        * }
        * ```
        *
        *
        * @property {any} [root] - set the root page for this tab
        * @property {any} [tabTitle] - set the title of this tab
        * @property {any} [tabIcon] - set the icon for this tab
        * @property {any} [select] - method to call when the current tab is selected
        *
        */
    export class Tab extends NavController {
            select: EventEmitter<any>;
            constructor(parentTabs: Tabs, app: IonicApp, config: Config, keyboard: Keyboard, elementRef: ElementRef, compiler: Compiler, viewManager: AppViewManager, zone: NgZone, renderer: Renderer, cd: ChangeDetectorRef);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            load(opts: any, done: any): void;
            /**
                * @private
                */
            loadPage(viewCtrl: any, navbarContainerRef: any, opts: any, done: any): void;
            /**
                * @private
                */
            setSelected(isSelected: any): void;
            /**
                * @private
                */
            emitSelect(): void;
            /**
                * @private
                */
            hideNavbars(shouldHideNavbars: any): void;
            /**
                *
                * ```ts
                * export class MyClass{
                *  constructor(tab: Tab){
                *    this.tab = tab;
                *    console.log(this.tab.index);
                *  }
                * }
                * ```
                *
                * @returns {Number} Returns the index of this page within its NavController.
                *
                */
            index: any;
            /**
                * @private
                */
            ngOnDestroy(): void;
    }
}

declare module 'ionic/ionic/components/list/list' {
    import { ElementRef, Renderer, NgZone } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { Config } from 'ionic/ionic/config/config';
    /**
        * The List is a widely used interface element in almost any mobile app, and can include
        * content ranging from basic text all the way to buttons, toggles, icons, and thumbnails.
        *
        * Both the list, which contains items, and the list items themselves can be any HTML
        * element.
        *
        * Using the List and Item components make it easy to support various
        * interaction modes such as swipe to edit, drag to reorder, and removing items.
        * @demo /docs/v2/demos/list/
        * @see {@link /docs/v2/components#lists List Component Docs}
        *
        *
        */
    export class List extends Ion {
            constructor(elementRef: ElementRef, config: Config, zone: NgZone);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
            /**
                * @private
                */
            _initVirtualScrolling(): void;
            /**
                * @private
                */
            setItemTemplate(item: any): void;
            /**
                * Enable sliding items if your page has them
                *
                * ```ts
                * export class MyClass {
                *    constructor(app: IonicApp){
                *      this.app = app;
                *      this.list = this.app.getComponent('my-list');
                *    }
                *    stopSliding(){
                *      this.list.enableSlidingItems(false);
                *    }
                * }
                * ```
                * @param {Boolean} shouldEnable whether the item-sliding should be enabled or not
                */
            enableSlidingItems(shouldEnable: any): void;
            /**
                * Enable sliding items if your page has
                *
                * ```ts
                * export class MyClass {
                *    constructor(app: IonicApp){
                *      this.app = app;
                *      this.list = this.app.getComponent('my-list');
                *    }
                *    // Here we have some method that will close the items
                *    // when called
                *    closeItmes(){
                *      this.list.closeSlidingItems();
                *    }
                * }
                * ```
                */
            closeSlidingItems(): void;
    }
    /**
        * @private
        */
    export class ListHeader {
            constructor(_renderer: Renderer, _elementRef: ElementRef, id: string);
            id: any;
    }
}

declare module 'ionic/ionic/components/input/input' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { NavController } from 'ionic/ionic/components/nav/nav-controller';
    import { Config } from 'ionic/ionic/config/config';
    import { Form } from 'ionic/ionic/util/form';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Content } from 'ionic/ionic/components/content/content';
    import { Platform } from 'ionic/ionic/platform/platform';
    /**
        * @name Input
        * @module ionic
        * @description
        *
        * `ion-input` is a generic wrapper for both inputs and textareas. You can give `ion-input` attributes to tell it how to handle a child `ion-label` component.
        *
        * @property [fixed-label] - a persistant label that sits next the the input
        * @property [floating-label] - a label that will float about the input if the input is empty of looses focus
        * @property [stacked-label] - A stacked label will always appear on top of the input
        * @property [inset] - The input will be inset
        * @property [clearInput] - A clear icon will appear in the input which clears it
        *
        * @usage
        * ```html
        *  <ion-input>
        *    <ion-label>Username</ion-label>
        *    <input type="text" value="">
        *  </ion-input>
        *
        *  <ion-input clearInput>
        *    <input type="text" placeholder="Username">
        *  </ion-input>
        *
        *  <ion-input fixed-label>
        *    <ion-label>Username</ion-label>
        *    <input type="text" value="">
        *  </ion-input>
        *
        *  <ion-input floating-label>
        *    <ion-label>Username</ion-label>
        *    <input type="text" value="">
        *  </ion-input>
        * ```
        *
        */
    export class ItemInput {
            /**
                * @private
                */
            clearInput: any;
            value: string;
            constructor(config: Config, _form: Form, _renderer: Renderer, _elementRef: ElementRef, _app: IonicApp, _platform: Platform, _scrollView: Content, _nav: NavController, isFloating: string, isStacked: string, isFixed: string, isInset: string);
            /**
                * @private
                */
            _setInput: any;
            /**
                * @private
                */
            _setLabel: any;
            /**
                * @private
                */
            _buttons: any;
            /**
                * @private
                */
            _icons: any;
            /**
                * @private
                * On Initialization check for attributes
                */
            ngOnInit(): void;
            /**
                * @private
                */
            ngAfterViewInit(): void;
            /**
                 * @private
                */
            clearTextInput(): void;
            /**
                * @private
                */
            pointerStart(ev: any): void;
            /**
                * @private
                */
            pointerEnd(ev: any): void;
            /**
                * @private
                */
            initFocus(): void;
            /**
                * @private
                */
            setFocus(): void;
            /**
                * @private
                */
            regMove(): void;
            /**
                * @private
                */
            deregMove(): void;
            /**
                * @private
                */
            focusChange(inputHasFocus: any): void;
            /**
                * @private
                */
            hasFocus(): any;
            /**
                * @private
                */
            hasValue(inputValue: any): void;
            /**
                * @private
                * This function is used to add the Angular css classes associated with inputs in forms
                */
            hasClass(className: any): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
            /**
                * @private
                */
            static getScrollData(inputOffsetTop: any, inputOffsetHeight: any, scrollViewDimensions: any, keyboardHeight: any, plaformHeight: any): {
                    scrollAmount: number;
                    scrollTo: number;
                    scrollPadding: number;
                    inputSafeY: number;
            };
    }
}

declare module 'ionic/ionic/components/item/item-sliding' {
    import { ElementRef } from 'angular2/core';
    import { List } from 'ionic/ionic/components/list/list';
    /**
        * @name ItemSliding
        *
        * @description
        * Creates a list-item that can easily be swiped, deleted, reordered, edited, and more.
        *
        * @usage
        * ```html
        * <ion-list>
        *   <ion-item-sliding *ngFor="#item of items">
        *     <ion-item (click)="itemTapped(item)">
        *       {{item.title}}
        *     </ion-item>
        *     <ion-item-options>
        *       <button (click)="favorite(item)">Favorite</button>
        *       <button (click)="share(item)">Share</button>
        *     </ion-item-options>
        *   </ion-item-sliding>
        * </ion-list>
        * ```
        * @see {@link /docs/v2/components#lists List Component Docs}
        * @see {@link ../../list/List List API Docs}
        */
    export class ItemSliding {
            constructor(_list: List, elementRef: ElementRef);
            /**
                * @private
                */
            close(): void;
    }
}

declare module 'ionic/ionic/components/toolbar/toolbar' {
    import { ElementRef } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { Config } from 'ionic/ionic/config/config';
    import { Navbar } from 'ionic/ionic/components/navbar/navbar';
    /**
        * @private
        */
    export class ToolbarBase extends Ion {
            itemRefs: any[];
            titleRef: any;
            titleCmp: any;
            constructor(elementRef: ElementRef, config: Config);
            /**
                * @private
                */
            setTitleCmp(titleCmp: any): void;
            /**
                * @private
                * Returns the toolbar title text if it exists or an empty string
                */
            getTitleText(): any;
            /**
                * @private
                */
            getTitleRef(): any;
            /**
                * @private
                * A toolbar items include the left and right side `ion-buttons`,
                * and every `menu-toggle`. It does not include the `ion-title`.
                * @returns {TODO} Array of this toolbar's item ElementRefs.
                */
            getItemRefs(): any[];
            /**
                * @private
                */
            addItemRef(itemElementRef: any): void;
    }
    /**
        * @name Toolbar
        * @description
        * The toolbar is generic bar that sits above or below content.
        * Unlike an `Navbar`, `Toolbar` can be used for a subheader as well.
        * @usage
        * ```html
        * <ion-toolbar>
        *   <ion-title>My Toolbar Title</ion-title>
        * </ion-toolbar>
        *
        *  <ion-content></ion-content>
        *  ```
        * @demo /docs/v2/demos/toolbar/
        * @see {@link ../../navbar/Navbar/ Navbar API Docs}
        */
    export class Toolbar extends ToolbarBase {
            constructor(elementRef: ElementRef, config: Config);
    }
    /**
        * @name Title
        * @description
        * `ion-title` is a component that sets the title of the `Toolbar` or `Navbar`
        * @usage
        * ```html
        * <ion-navbar *navbar>
        *    <ion-title>Tab 1</ion-title>
        * </ion-navbar>
        *
        *<!-- or if you wanted to create a subheader title-->
        * <ion-navbar *navbar>
        *    <ion-title>Tab 1</ion-title>
        * </ion-navbar>
        * <ion-toolbar>
        *   <ion-title>SubHeader</ion-title>
        * </ion-toolbar>
        *  ```
        * @demo /docs/v2/demos/toolbar/
        */
    export class ToolbarTitle extends Ion {
            constructor(elementRef: ElementRef, toolbar: Toolbar, navbar: Navbar);
            /**
                * @private
                */
            getTitleText(): any;
    }
    /**
        * @private
        */
    export class ToolbarItem {
            inToolbar: boolean;
            constructor(elementRef: ElementRef, toolbar: Toolbar, navbar: Navbar);
            _buttons: any;
    }
}

declare module 'ionic/ionic/components/icon/icon' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { Config } from 'ionic/ionic/config/config';
    /**
        * @name Icon
        * @description
        * Icons can be used on their own, or inside of a number of Ionic components.
        * For a full list of available icons, check out the
        * [Ionicons resource docs](../../../../resources/ionicons).
        *
        * One feature of Ionicons is that when icon names are set, the actual icon
        * which is rendered can change slightly depending on the mode the app is
        * running from. For example, by setting the icon name of `alarm`, on iOS the
        * icon will automatically apply `ios-alarm`, and on Material Design it will
        * automatically apply `md-alarm`. This allow the developer to write the
        * markup once, and let Ionic automatically apply the appropriate icon.
        *
        * @usage
        * ```html
        * <!-- automatically uses the correct "star" icon depending on the mode -->
        * <ion-icon name="star"></ion-icon>
        *
        * <!-- explicity set the icon for each mode -->
        * <ion-icon ios="ios-home" md="md-home"></ion-icon>
        *
        * <!-- always use the same icon, no matter what the mode -->
        * <ion-icon name="ios-clock"></ion-icon>
        * <ion-icon name="logo-twitter"></ion-icon>
        * ```
        *
        * @property {string} [name] - Use the appropriate icon for the mode.
        * @property {string} [ios] - Explicitly set the icon to use on iOS.
        * @property {string} [md] - Explicitly set the icon to use on Android.
        * @property {boolean} [isActive] - Whether or not the icon has an "active"
        * appearance. On iOS an active icon is filled in or full appearance, and an
        * inactive icon on iOS will use an outlined version of the icon same icon.
        * Material Design icons do not change appearance depending if they're active
        * or not. The `isActive` property is largely used by the tabbar.
        * @see {@link /docs/v2/components#icons Icon Component Docs}
        *
        */
    export class Icon {
            constructor(config: Config, _elementRef: ElementRef, _renderer: Renderer);
            /**
                * @private
                */
            name: any;
            /**
                * @private
                */
            ios: any;
            /**
                * @private
                */
            md: any;
            /**
                * @private
                */
            isActive: boolean;
            /**
                * @private
                */
            update(): void;
            /**
                * @private
                */
            addClass(className: any): void;
    }
}

declare module 'ionic/ionic/components/checkbox/checkbox' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { NgControl } from 'angular2/common';
    import { Form } from 'ionic/ionic/util/form';
    /**
        * The checkbox is no different than the HTML checkbox input, except it's styled differently.
        *
        * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/core/Form-interface.html) for more info on forms and input.
        *
        * @property [checked] - whether or not the checkbox is checked (defaults to false)
        * @property [value] - the value of the checkbox component
        * @property [disabled] - whether or not the checkbox is disabled or not.
        *
        * @usage
        * ```html
        * <ion-checkbox checked="true" value="isChecked" ngControl="htmlCtrl">
        *   HTML5
        * </ion-checkbox>
        * ```
        * @demo /docs/v2/demos/checkbox/
        * @see {@link /docs/v2/components#checkbox Checkbox Component Docs}
        */
    export class Checkbox {
            value: string;
            checked: any;
            disabled: boolean;
            id: string;
            constructor(_form: Form, _elementRef: ElementRef, _renderer: Renderer, ngControl: NgControl);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                * Toggle the checked state of the checkbox. Calls onChange to pass the updated checked state to the model (Control).
                */
            toggle(): void;
            checked: boolean;
            /**
                * @private
                */
            _click(ev: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the model (Control) on change to update
                * the checked value.
                * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
                */
            writeValue(value: any): void;
            /**
                * @private
                */
            onChange(val: any): void;
            /**
                * @private
                */
            onTouched(val: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the view (NgControl) to register the
                * onChange event handler that updates the model (Control).
                * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
                * @param {Function} fn  the onChange event handler.
                */
            registerOnChange(fn: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the the view (NgControl) to register
                * the onTouched event handler that marks model (Control) as touched.
                * @param {Function} fn  onTouched event handler.
                */
            registerOnTouched(fn: any): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
    }
}

declare module 'ionic/ionic/components/select/select' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { NgControl } from 'angular2/common';
    import { Form } from 'ionic/ionic/util/form';
    import { Label } from 'ionic/ionic/components/label/label';
    import { NavController } from 'ionic/ionic/components/nav/nav-controller';
    /**
        * @name Select
        * @description
        * The `ion-select` component is similar to an HTML `<select>` element, however,
        * Ionic's select component makes it easier for users to sort through and select
        * the preferred option or options. When users tap the select component, a
        * dialog will appear with all of the options in a large, easy to select list
        * for users.
        *
        * Under-the-hood the `ion-select` actually uses the
        * {@link ../../alert/Alert Alert API} to open up the overlay of options
        * which the user is presented with. Select takes one child `ion-label`
        * component, and numerous child `ion-option` components. Each `ion-option`
        * should be given a `value` attribute.
        *
        * ### Single Value: Radio Buttons
        *
        * The standard `ion-select` component allows the user to select only one
        * option. When selecting only one option the alert overlay presents users with
        * a radio button styled list of options. The `ion-select` component's value
        * receives the value of the selected option's value.
        *
        * ```html
        * <ion-select [(ngModel)]="gender">
        *   <ion-label>Gender</ion-label>
        *   <ion-option value="f" checked="true">Female</ion-option>
        *   <ion-option value="m">Male</ion-option>
        * </ion-select>
        * ```
        *
        * ### Multiple Value: Checkboxes
        *
        * By adding the `multiple="true"` attribute to `ion-select`, users are able
        * to select multiple options. When multiple options can be selected, the alert
        * overlay presents users with a checkbox styled list of options. The
        * `ion-select multiple="true"` component's value receives an array of all the
        * selected option values.
        *
        * ```html
        * <ion-select [(ngModel)]="toppings" multiple="true">
        *   <ion-label>Toppings</ion-label>
        *   <ion-option value="bacon">Bacon</ion-option>
        *   <ion-option value="olives">Black Olives</ion-option>
        *   <ion-option value="xcheese">Extra Cheese</ion-option>
        *   <ion-option value="mushrooms">Mushrooms</ion-option>
        *   <ion-option value="pepperoni">Pepperoni</ion-option>
        *   <ion-option value="sausage">Sausage</ion-option>
        * </ion-select>
        * ```
        *
        * ### Alert Buttons
        * By default, the two buttons read `Cancel` and `OK`. The each button's text
        * can be customized using the `cancelText` and `okText` attributes:
        *
        * ```html
        * <ion-select okText="Okay" cancelText="Dismiss">
        *   ...
        * </ion-select>
        * ```
        *
        * ### Alert Options
        *
        * Remember how `ion-select` is really just a wrapper to `Alert`? By using
        * the `alertOptions` property you can pass custom options to the alert
        * overlay. This would be useful if there is a custom alert title,
        * subtitle or message. {@link ../../alert/Alert Alert API}
        *
        * ```html
        * <ion-select [alertOptions]="alertOptions">
        *   ...
        * </ion-select>
        * ```
        *
        * ```ts
        * this.alertOptions = {
        *   title: 'Pizza Toppings',
        *   subTitle: 'Select your toppings'
        * };
        * ```
        *
        */
    export class Select {
            cancelText: string;
            okText: string;
            value: string;
            alertOptions: any;
            checked: any;
            disabled: boolean;
            id: string;
            multiple: string;
            label: Label;
            options: any;
            constructor(_form: Form, _elementRef: ElementRef, _renderer: Renderer, _navCtrl: NavController, ngControl: NgControl);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            ngAfterContentInit(): void;
            /**
                * @private
                */
            _click(): void;
            /**
                * @private
                * Angular2 Forms API method called by the model (Control) on change to update
                * the checked value.
                * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
                */
            writeValue(value: any): void;
            /**
                * @private
                */
            onChange(val: any): void;
            /**
                * @private
                */
            onTouched(val: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the view (NgControl) to register the
                * onChange event handler that updates the model (Control).
                * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
                * @param {Function} fn  the onChange event handler.
                */
            registerOnChange(fn: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the the view (NgControl) to register
                * the onTouched event handler that marks model (Control) as touched.
                * @param {Function} fn  onTouched event handler.
                */
            registerOnTouched(fn: any): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
    }
}

declare module 'ionic/ionic/components/toggle/toggle' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { NgControl } from 'angular2/common';
    import { Form } from 'ionic/ionic/util/form';
    import { Config } from 'ionic/ionic/config/config';
    /**
        * @name Toggle
        * @description
        * A toggle technically is the same thing as an HTML checkbox input, except it looks different and is easier to use on a touch device. Ionic prefers to wrap the checkbox input with the `<label>` in order to make the entire toggle easy to tap or drag.
        * Togglees can also have colors assigned to them, by adding any color attribute to them.
        *
        * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/forms/) for more info on forms and input.
        * @property {any} [value] - the inital value of the toggle
        * @property {boolean} [checked] - whether the toggle it toggled or not
        * @property {boolean} [disabled] - whether the toggle is disabled or not
        * @property {string} [id] - a unique ID for a toggle
        * @usage
        * ```html
        * <!-- Create a single toggle -->
        *  <ion-toggle checked="true">
        *    Pineapple
        *  </ion-toggle>
        *
        * <!-- Create a list of togglees -->
        *  <ion-list>
        *
        *    <ion-toggle checked="true">
        *      Apple
        *    </ion-toggle>
        *
        *     <ion-toggle checked="false">
        *       Banana
        *     </ion-toggle>
        *
        *     <ion-toggle disabled="true">
        *       Cherry
        *     </ion-toggle>
        *
        *  </ion-list>
        * ```
        * @demo /docs/v2/demos/toggle/
        * @see {@link /docs/v2/components#toggle Toggle Component Docs}
        */
    export class Toggle {
            value: string;
            checked: any;
            disabled: boolean;
            id: string;
            constructor(_form: Form, _elementRef: ElementRef, _renderer: Renderer, config: Config, ngControl: NgControl);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * Toggle the checked state of this toggle.
                */
            toggle(): void;
            checked: boolean;
            /**
                * @private
                */
            pointerDown(ev: any): void;
            /**
                * @private
                */
            pointerUp(ev: any): void;
            /**
                * @private
                */
            writeValue(value: any): void;
            /**
                * @private
                */
            onChange(val: any): void;
            /**
                * @private
                */
            onTouched(val: any): void;
            /**
                * @private
                */
            registerOnChange(fn: any): void;
            /**
                * @private
                */
            registerOnTouched(fn: any): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
            /**
                * @private
                */
            isDisabled(ev: any): boolean;
            /**
                * @private
                */
            initFocus(): void;
    }
}

declare module 'ionic/ionic/components/text-input/text-input' {
    import { ElementRef, Renderer, EventEmitter } from 'angular2/core';
    /**
      * @private
      */
    export class TextInput {
        value: string;
        ngModel: any;
        valueChange: EventEmitter<string>;
        focusChange: EventEmitter<boolean>;
        constructor(type: string, _elementRef: ElementRef, _renderer: Renderer);
        ngOnInit(): void;
        _keyup(ev: any): void;
        _focus(): void;
        _blur(): void;
        labelledBy(val: any): void;
        setFocus(): void;
        relocate(shouldRelocate: any, inputRelativeY: any): void;
        hideFocus(shouldHideFocus: any): void;
        hasFocus(): boolean;
        addClass(className: any): void;
        hasClass(className: any): void;
        element(): any;
    }
}

declare module 'ionic/ionic/components/label/label' {
    import { ElementRef, Renderer } from 'angular2/core';
    import { Form } from 'ionic/ionic/util/form';
    /**
        * @name Label
        * @description
        * Labels describe the data that the user should enter in to an input element.
        * @usage
        * ```html
        * <ion-input>
        *   <ion-label>Username</ion-label>
        *   <input type="text" value="">
        * </ion-input>
        * ```
        *
        * @demo /docs/v2/demos/label/
        * @see {@link ../../../../components#inputs Input Component Docs}
        * @see {@link ../Input Input API Docs}
        *
        */
    export class Label {
            constructor(_form: Form, _elementRef: ElementRef, _renderer: Renderer);
            /**
                * @private
                */
            ngOnInit(): void;
            text: any;
            /**
                * @private
                */
            addClass(className: any): void;
    }
}

declare module 'ionic/ionic/components/segment/segment' {
    import { ElementRef, Renderer, EventEmitter } from 'angular2/core';
    import { NgControl } from 'angular2/common';
    /**
        * @name SegmentButton
        * @description
        * The child buttons of the `ion-segment` component. Each `ion-segment-button` must have a value.
        * @property {string} [value] - the value of the segment-button. Required.
        * @usage
        * ```html
        * <ion-segment [(ngModel)]="relationship" primary>
        *   <ion-segment-button value="friends" (select)="selectedFriends()">
        *     Friends
        *   </ion-segment-button>
        *   <ion-segment-button value="enemies" (select)="selectedEnemies()">
        *     Enemies
        *   </ion-segment-button>
        * </ion-segment>
        *```
        *
        * Or with `FormBuilder`
        *
        *```html
        * <form [ngFormModel]="myForm">
        *   <ion-segment ngControl="mapStyle" danger>
        *     <ion-segment-button value="standard">
        *       Standard
        *     </ion-segment-button>
        *     <ion-segment-button value="hybrid">
        *       Hybrid
        *     </ion-segment-button>
        *     <ion-segment-button value="sat">
        *       Satellite
        *     </ion-segment-button>
        *   </ion-segment>
        * </form>
        * ```
        *
        * @property {Any} [click] - expression to evaluate when a segment button has been clicked
        *
        * @demo /docs/v2/demos/segment/
        * @see {@link /docs/v2/components#segment Segment Component Docs}
        * @see {@link /docs/v2/api/components/segment/Segment/ Segment API Docs}
        */
    export class SegmentButton {
            value: string;
            select: EventEmitter<SegmentButton>;
            constructor(_renderer: Renderer, _elementRef: ElementRef);
            ngOnInit(): void;
            isActive: any;
    }
    /**
        * @name Segment
        * @description
        * A Segment is a group of buttons, sometimes known as Segmented Controls, that allow the user to interact with a compact group of a number of controls.
        * Segments provide functionality similar to tabs, selecting one will unselect all others. You should use a tab bar instead of a segmented control when you want to let the user move back and forth between distinct pages in your app.
        * You could use Angular 2's `ngModel` or `FormBuilder` API. For an overview on how `FormBuilder` works, checkout [Angular 2 Forms](http://learnangular2.com/forms/), or [Angular FormBuilder](https://angular.io/docs/ts/latest/api/common/FormBuilder-class.html)
        *
        *
        * @usage
        * ```html
        * <ion-segment [(ngModel)]="relationship" (change)="onSegmentChanged($event)" danger>
        *   <ion-segment-button value="friends">
        *     Friends
        *   </ion-segment-button>
        *   <ion-segment-button value="enemies">
        *     Enemies
        *   </ion-segment-button>
        * </ion-segment>
        *```
        *
        * Or with `FormBuilder`
        *
        *```html
        * <form [ngFormModel]="myForm">
        *   <ion-segment ngControl="mapStyle" danger>
        *     <ion-segment-button value="standard">
        *       Standard
        *     </ion-segment-button>
        *     <ion-segment-button value="hybrid">
        *       Hybrid
        *     </ion-segment-button>
        *     <ion-segment-button value="sat">
        *       Satellite
        *     </ion-segment-button>
        *   </ion-segment>
        * </form>
        * ```
        *
        * @property {Any} [change] - expression to evaluate when a segment button has been changed
        *
        * @demo /docs/v2/demos/segment/
        * @see {@link /docs/v2/components#segment Segment Component Docs}
        * @see [Angular 2 Forms](http://learnangular2.com/forms/)
        */
    export class Segment {
            _buttons: any;
            change: EventEmitter<SegmentButton>;
            value: any;
            constructor(ngControl: NgControl);
            /**
                * @private
                * Write a new value to the element.
                */
            writeValue(value: any): void;
            /**
                * @private
                */
            ngAfterViewInit(): void;
            /**
                * @private
                * Set the function to be called when the control receives a change event.
                */
            registerOnChange(fn: any): void;
            /**
                * @private
                * Set the function to be called when the control receives a touch event.
                */
            registerOnTouched(fn: any): void;
    }
}

declare module 'ionic/ionic/components/radio/radio' {
    import { ElementRef, Renderer, EventEmitter } from 'angular2/core';
    import { NgControl } from 'angular2/common';
    import { Form } from 'ionic/ionic/util/form';
    /**
        * @description
        * A radio button with a unique value. Note that all `<ion-radio>` components
        * must be wrapped within a `<ion-list radio-group>`, and there must be at
        * least two `<ion-radio>` components within the radio group.
        *
        * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/forms/) for more info on forms and input.
        *
        * @usage
        * ```html
        * <ion-radio value="my-value" checked="true">
        *   Radio Label
        * </ion-radio>
        * ```
        * @demo /docs/v2/demos/radio/
        * @see {@link /docs/v2/components#radio Radio Component Docs}
        */
    export class RadioButton {
            value: string;
            checked: any;
            disabled: boolean;
            id: string;
            select: EventEmitter<RadioButton>;
            labelId: any;
            constructor(_form: Form, _renderer: Renderer, _elementRef: ElementRef);
            /**
                * @private
                */
            ngOnInit(): void;
            isChecked: any;
            /**
                * @private
                */
            ngOnDestroy(): void;
    }
    /**
        * A radio group is a group of radio components.
        *
        * Selecting a radio button in the group unselects all others in the group.
        *
        * New radios can be registered dynamically.
        *
        * See the [Angular 2 Docs](https://angular.io/docs/js/latest/api/forms/) for more info on forms and input.
        *
        * @usage
        * ```html
        * <ion-list radio-group ngControl="autoManufacturers">
        *
        *   <ion-list-header>
        *     Auto Manufacturers
        *   </ion-list-header>
        *
        *   <ion-radio value="cord">
        *     Cord
        *   </ion-radio>
        *
        *   <ion-radio value="duesenberg" checked="true">
        *     Duesenberg
        *   </ion-radio>
        *
        *   <ion-radio value="hudson">
        *     Hudson
        *   </ion-radio>
        *
        *   <ion-radio value="packard">
        *     Packard
        *   </ion-radio>
        *
        *   <ion-radio value="studebaker">
        *     Studebaker
        *   </ion-radio>
        *
        *   <ion-radio value="tucker">
        *     Tucker
        *   </ion-radio>
        *
        * </ion-list>
        * ```
        * @demo /docs/v2/demos/radio/
        * @see {@link /docs/v2/components#radio Radio Component Docs}
     */
    export class RadioGroup {
            change: EventEmitter<RadioGroup>;
            id: any;
            value: any;
            constructor(ngControl: NgControl, _renderer: Renderer, _elementRef: ElementRef);
            /**
                * @private
                * Angular2 Forms API method called by the model (Control) on change to update
                * the checked value.
                * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L34
                */
            writeValue(value: any): void;
            /**
                * @private
                */
            onChange(val: any): void;
            /**
                * @private
                */
            onTouched(val: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the view (NgControl) to register the
                * onChange event handler that updates the model (Control).
                * https://github.com/angular/angular/blob/master/modules/angular2/src/forms/directives/shared.ts#L27
                * @param {Function} fn  the onChange event handler.
                */
            registerOnChange(fn: any): void;
            /**
                * @private
                * Angular2 Forms API method called by the the view (NgControl) to register
                * the onTouched event handler that marks the model (Control) as touched.
                * @param {Function} fn  onTouched event handler.
                */
            registerOnTouched(fn: any): void;
            /**
                * @private
                */
            ngAfterContentInit(): void;
    }
}

declare module 'ionic/ionic/components/searchbar/searchbar' {
    import { ElementRef, EventEmitter } from 'angular2/core';
    import { NgControl } from 'angular2/common';
    import { Ion } from 'ionic/ionic/components/ion';
    import { Config } from 'ionic/ionic/config/config';
    /**
     * @private
     */
    export class SearchbarInput {
            constructor(_elementRef: ElementRef);
    }
    /**
        * @name Searchbar
        * @module ionic
        * @description
        * Manages the display of a Searchbar which can be used to search or filter items.
        *
        * @usage
        * ```html
        * <ion-searchbar [(ngModel)]="defaultSearch" (input)="triggerInput($event)" (cancel)="onCancelSearchbar($event)" (clear)="onClearSearchbar($event)"></ion-searchbar>
        * ```
        *
        * @property {string} [cancelButtonText=Cancel] - Sets the cancel button text to the value passed in
        * @property {boolean} [hideCancelButton=false] - Hides the cancel button
        * @property {string} [placeholder=Search] - Sets input placeholder to the value passed in
        *
        * @property {Any} [input] - Expression to evaluate when the Searchbar input has changed including cleared
        * @property {Any} [keydown] - Expression to evaluate when a key is pushed down in the Searchbar input
        * @property {Any} [keypress] - Expression to evaluate when a character is inserted in the Searchbar input
        * @property {Any} [keyup] - Expression to evaluate when a key is released in the Searchbar input
        * @property {Any} [blur] - Expression to evaluate when the Searchbar input has blurred
        * @property {Any} [focus] - Expression to evaluate when the Searchbar input has focused
        * @property {Any} [cancel] - Expression to evaluate when the cancel button is clicked
        * @property {Any} [clear] - Expression to evaluate when the clear input button is clicked
        *
        * @see {@link /docs/v2/components#searchbar Searchbar Component Docs}
        */
    export class Searchbar extends Ion {
            searchbarInput: any;
            /**
                * @private
                */
            cancelButtonText: string;
            /**
                * @private
                */
            hideCancelButton: any;
            /**
                * @private
                */
            placeholder: string;
            /**
                * @private
                */
            ngModel: any;
            /**
                * @private
                */
            input: EventEmitter<Searchbar>;
            /**
                * @private
                */
            blur: EventEmitter<Searchbar>;
            /**
                * @private
                */
            focus: EventEmitter<Searchbar>;
            /**
                * @private
                */
            cancel: EventEmitter<Searchbar>;
            /**
                * @private
                */
            clear: EventEmitter<Searchbar>;
            value: string;
            blurInput: boolean;
            inputElement: any;
            searchIconElement: any;
            mode: string;
            isFocused: any;
            shouldLeftAlign: any;
            constructor(_elementRef: ElementRef, _config: Config, ngControl: NgControl);
            /**
                * @private
                * On Initialization check for attributes
                */
            ngOnInit(): void;
            /**
                * @private
                * After View Initialization check the value
                */
            ngAfterViewInit(): void;
            /**
                * @private
                * Determines whether or not to add style to the element
                * to center it properly (ios only)
                */
            setElementLeft(): void;
            /**
                * @private
                * Calculates the amount of padding/margin left for the elements
                * in order to center them based on the placeholder width
                */
            addElementLeft(): void;
            /**
                * @private
                * Update the Searchbar input value when the input changes
                */
            inputChanged(ev: any): void;
            /**
                * @private
                * Sets the Searchbar to focused and aligned left on input focus.
                */
            inputFocused(): void;
            /**
                * @private
                * Sets the Searchbar to not focused and checks if it should align left
                * based on whether there is a value in the searchbar or not.
                */
            inputBlurred(): void;
            /**
                * @private
                * Clears the input field and triggers the control change.
                */
            clearInput(): void;
            /**
                * @private
                * Clears the input field and tells the input to blur since
                * the clearInput function doesn't want the input to blur
                * then calls the custom cancel function if the user passed one in.
                */
            cancelSearchbar(): void;
            /**
                * @private
                * Write a new value to the element.
                */
            writeValue(value: any): void;
            onChange: (_: any) => void;
            onTouched: () => void;
            /**
                * @private
                * Set the function to be called when the control receives a change event.
                */
            registerOnChange(fn: (_: any) => {}): void;
            /**
                * @private
                * Set the function to be called when the control receives a touch event.
                */
            registerOnTouched(fn: () => {}): void;
    }
}

declare module 'ionic/ionic/components/nav/nav' {
    import { ChangeDetectorRef, ElementRef, NgZone, Compiler, AppViewManager, Renderer } from 'angular2/core';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Config } from 'ionic/ionic/config/config';
    import { Keyboard } from 'ionic/ionic/util/keyboard';
    import { NavController } from 'ionic/ionic/components/nav/nav-controller';
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name Nav
        * @description
        * _For a quick walkthrough of navigation in Ionic, check out the
        * [Navigation section](../../../../components/#navigation) of the Component
        * docs._
        *
        * Nav is a basic navigation controller component.  As a subclass of NavController
        * you use it to navigate to pages in your app and manipulate the navigation stack.
        * Nav automatically animates transitions between pages for you.
        *
        * For more information on using navigation controllers like Nav or [Tab](../../Tabs/Tab/),
        * take a look at the [NavController API reference](../NavController/).
        *
        * You must set a root page (where page is any [@Page](../../config/Page/)
        * component) to be loaded initially by any Nav you create, using
        * the 'root' property:
        *
        * ```ts
        * import {GettingStartedPage} from 'getting-started';
        * @App({
        *   template: `<ion-nav [root]="rootPage"></ion-nav>`
        * })
        * class MyApp {
        *   constructor(){
        *     this.rootPage = GettingStartedPage;
        *   }
        * }
        * ```
        *
        * <h2 id="back_navigation">Back navigation</h2>
        * If a [page](../NavController/#creating_pages) you navigate to has a [NavBar](../NavBar/),
        * Nav will automatically add a back button to it if there is a page
        * before the one you are navigating to in the navigation stack.
        *
        * Additionally, specifying the `swipe-back-enabled` property will allow you to
        * swipe to go back:
        * ```html
        * <ion-nav swipe-back-enabled="false" [root]="rootPage"></ion-nav>
        * ```
        *
        * Here is a diagram of how Nav animates smoothly between pages:
        *
        * <div class="highlight less-margin">
        *   <pre>
        *                           +-------+
        *                           |  App  |
        *                           +---+---+
        *                           &lt;ion-app&gt;
        *                               |
        *                  +------------+-------------+
        *                  |   Ionic Nav Controller   |
        *                  +------------+-------------+
        *                           &lt;ion-nav&gt;
        *                               |
        *                               |
        *             Page 3  +--------------------+                     LoginPage
        *           Page 2  +--------------------+ |
        *         Page 1  +--------------------+ | |              +--------------------+
        *                 | | Header           |&lt;-----------------|       Login        |
        *                 +--------------------+ | |              +--------------------+
        *                 | | |                | | |              | Username:          |
        *                 | | |                | | |              | Password:          |
        *                 | | |  Page 3 is     | | |              |                    |
        *                 | | |  only content  | | |              |                    |
        *                 | | |                |&lt;-----------------|                    |
        *                 | | |                | | |              |                    |
        *                 | | |                | | |              |                    |
        *                 | +------------------|-+ |              |                    |
        *                 | | Footer           |-|-+              |                    |
        *                 | +------------------|-+                |                    |
        *                 +--------------------+                  +--------------------+
        *
        *           +--------------------+    +--------------------+    +--------------------+
        *           | Header             |    | Content            |    | Content            |
        *           +--------------------+    |                    |    |                    |
        *           | Content            |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    |                    |    |                    |
        *           |                    |    +--------------------+    |                    |
        *           |                    |    | Footer             |    |                    |
        *           +--------------------+    +--------------------+    +--------------------+
        *
        *   </pre>
        * </div>
        *
        * @see {@link /docs/v2/components#navigation Navigation Component Docs}
        */
    export class Nav extends NavController {
            constructor(hostNavCtrl: NavController, viewCtrl: ViewController, app: IonicApp, config: Config, keyboard: Keyboard, elementRef: ElementRef, compiler: Compiler, viewManager: AppViewManager, zone: NgZone, renderer: Renderer, cd: ChangeDetectorRef);
            /**
                * @private
                */
            ngOnInit(): void;
    }
}

declare module 'ionic/ionic/components/nav/nav-push' {
    import { NavController } from 'ionic/ionic/components/nav/nav-controller';
    import { NavRegistry } from 'ionic/ionic/components/nav/nav-registry';
    /**
        * @name NavPush
        * @description
        * Directive for declaratively linking to a new page instead of using
        * {@link ../NavController/#push NavController.push}. Similar to ui-router's `ui-sref`.
        *
        * @usage
        * ```html
        * <button [navPush]="pushPage"></button>
        * ```
        * To specify parameters you can use array syntax or the `nav-params` property:
        * ```html
        * <button [navPush]="pushPage" [navParams]="params"></button>
        * ```
        * Where `pushPage` and `params` are specified in your component, and `pushPage`
        * contains a reference to a [@Page component](../../../config/Page/):
        *
        * ```ts
        * import {LoginPage} from 'login';
        * @Page({
        *   template: `<button [navPush]="pushPage" [navParams]="params"></button>`
        * })
        * class MyPage {
        *   constructor(){
        *     this.pushPage = LoginPage;
        *     this.params = { id: 42 };
        *   }
        * }
        * ```
        *
        * ### Alternate syntax
        * You can also use syntax similar to Angular2's router, passing an array to
        * NavPush:
        * ```html
        * <button [navPush]="[pushPage, params]"></button>
        * ```
        * @demo /docs/v2/demos/nav-push-pop/
        * @see {@link /docs/v2/components#navigation Navigation Component Docs}
        * @see {@link ../NavPop NavPop API Docs}
        */
    export class NavPush {
            /**
                * TODO
                * @param {NavController} nav  TODO
                */
            constructor(nav: NavController, registry: NavRegistry);
            /**
                * @private
                */
            onClick(): void;
    }
    /**
        * @name NavPop
        * @description
        * Directive for declaratively pop the current page off from the navigation stack.
        *
        * @usage
        * ```html
        * <ion-content>
        *  <div block button nav-pop>go back</div>
        * </ion-content>
        * ```
        * This will go back one page in the navigation stack
        *
        * Similar to {@link /docs/v2/api/components/nav/NavPush/ `NavPush` }
        * @demo /docs/v2/demos/nav-push-pop/
        * @see {@link /docs/v2/components#navigation Navigation Component Docs}
        * @see {@link ../NavPush NavPush API Docs}
        */
    export class NavPop {
            /**
                * TODO
                * @param {NavController} nav  TODO
                */
            constructor(nav: NavController);
            /**
                * @private
                */
            onClick(): void;
    }
}

declare module 'ionic/ionic/components/nav/nav-router' {
    import { ElementRef, DynamicComponentLoader } from 'angular2/core';
    import { RouterOutlet, Router, ComponentInstruction } from 'angular2/router';
    import { Nav } from 'ionic/ionic/components/nav/nav';
    /**
        * @private
        */
    export class NavRouter extends RouterOutlet {
            /**
                * TODO
                * @param {ElementRef} _elementRef  TODO
                * @param {DynamicComponentLoader} _loader  TODO
                * @param {Router} _parentRouter  TODO
                * @param {string} nameAttr  Value of the element's 'name' attribute
                * @param {Nav} nav  TODO
                */
            constructor(_elementRef: ElementRef, _loader: DynamicComponentLoader, _parentRouter: Router, nameAttr: string, nav: Nav);
            /**
                * @private
                * TODO
                * @param {ComponentInstruction} instruction  TODO
                */
            activate(nextInstruction: ComponentInstruction): Promise<any>;
            reuse(nextInstruction: ComponentInstruction): Promise<void>;
            /**
                * TODO
                * @param {TODO} type  TODO
                * @param {TODO} viewCtrl  TODO
                */
            stateChange(type: any, viewCtrl: any): void;
            /**
                * TODO
                * @param {TODO} componentType  TODO
                * @returns {TODO} TODO
                */
            getPathRecognizerByComponent(componentType: any): any;
    }
}

declare module 'ionic/ionic/components/navbar/navbar' {
    import { ElementRef, Renderer, TemplateRef, ViewContainerRef } from 'angular2/core';
    import { ToolbarBase } from 'ionic/ionic/components/toolbar/toolbar';
    import { Config } from 'ionic/ionic/config/config';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name Navbar
        * @description
        * Navbar is a global level toolbar that gets updated every time a page gets
        * loaded. You can pass the navbar a `ion-title` or any number of buttons.
        *
        * @usage
        * ```html
        * <ion-navbar *navbar>
        *
        *   <ion-buttons>
        *     <button (click)="toggleItems()">
        *       toggle
        *     </button>
        *   </ion-buttons>
        *
        *   <ion-title>
        *     Page Title
        *   </ion-title>
        *
        *   <ion-buttons>
        *     <button (click)="openModal()">
        *       Modal
        *     </button>
        *   </ion-buttons>
        * </ion-navbar>
        * ```
        *
        * @see {@link ../../toolbar/Toolbar/ Toolbar API Docs}
        */
    export class Navbar extends ToolbarBase {
            constructor(app: IonicApp, viewCtrl: ViewController, elementRef: ElementRef, config: Config, renderer: Renderer);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            getBackButtonRef(): any;
            /**
                * @private
                */
            setBackButtonRef(backButtonElementRef: any): void;
            /**
                * @private
                */
            getBackButtonTextRef(): any;
            /**
                * @private
                */
            setBackButtonTextRef(backButtonTextElementRef: any): void;
            /**
                * @private
                */
            setBackgroundRef(backgrouneElementRef: any): void;
            /**
                * @private
                */
            getBackgroundRef(): any;
            /**
                * @private
                */
            didEnter(): void;
            /**
                * @private
                */
            setHidden(isHidden: any): void;
    }
    /**
        * @private
        * Used to find and register headers in a view, and this directive's
        * content will be moved up to the common navbar location, and created
        * using the same context as the view's content area.
     */
    export class NavbarTemplate {
            constructor(viewContainerRef: ViewContainerRef, templateRef: TemplateRef, viewCtrl: ViewController);
    }
}

declare module 'ionic/ionic/components/app/id' {
    import { AppViewManager, ElementRef, Renderer } from 'angular2/core';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    /**
        * @name Id
        * @description
        * IdRef is an easy way to identify unique components in an app and access them
        * no matter where in the UI heirarchy you are. For example, this makes toggling
        * a global side menu feasible from any place in the application.
        *
        * See the [Menu section](http://ionicframework.com/docs/v2/components/#menus) of
        * the Component docs for an example of how Menus rely on ID's.
        *
        * @usage
        * To give any component an ID, simply set its `id` property:
        * ```html
        * <ion-checkbox id="myCheckbox"></ion-checkbox>
        * ```
        *
        * To get a reference to the registered component, inject the [IonicApp](../app/IonicApp/)
        * service:
        * ```ts
        * constructor(app: IonicApp) {
        *    this.app = app
        * }
        * ngAfterViewInit{
        *  var checkbox = this.app.getComponent("myCheckbox");
        *  if (checkbox.checked) {
        *    console.log('checkbox is checked');
        *  }
        * }
        * ```
        *
        * *NOTE:* It is not recommended to use ID's across Pages, as there is often no
        * guarantee that the registered component has not been destroyed if its Page
        * has been navigated away from.
        */
    export class IdRef {
            constructor(_app: IonicApp, _elementRef: ElementRef, _appViewManager: AppViewManager);
            /**
                * @private
                */
            ngOnInit(): void;
            /**
                * @private
                */
            ngOnDestroy(): void;
    }
    /**
        * @name Attr
        * @description
        * Attr allows you to dynamically add or remove an attribute based on the value of an expression or variable.
        * @usage
        * ```html
        * // toggle the no-lines attributes based on whether isAndroid is true or false
        * <ion-list [attr.no-lines]="isAndroid ? '' : null">
        * ```
        * @demo /docs/v2/demos/attr/
        */
    export class Attr {
            constructor(_renderer: Renderer, _elementRef: ElementRef);
            /**
                * @private
                */
            ngOnInit(): void;
    }
}

declare module 'ionic/ionic/components/show-hide-when/show-hide-when' {
    import { NgZone } from 'angular2/core';
    import { Platform } from 'ionic/ionic/platform/platform';
    /**
        * @private
        */
    export class DisplayWhen {
            constructor(conditions: any, platform: any, ngZone: any);
            orientation(): boolean;
    }
    /**
        *
        * The `showWhen` attribute takes a string that represents a plaform or screen orientation.
        * The element the attribute is added to will only be shown when that platform or screen orientation is active.
        * Complements the [hideWhen attribute](../HideWhen).
        * @usage
        * ```html
        * <div showWhen="ios">I am only visible on iOS!</div>
        * ```
        * @demo /docs/v2/demos/show-when/
        * @see {@link ../HideWhen HideWhen API Docs}
        */
    export class ShowWhen extends DisplayWhen {
            constructor(showWhen: string, platform: Platform, ngZone: NgZone);
            /**
                * @private
                */
            hidden: boolean;
    }
    /**
        *
        * The `hideWhen` attribute takes a string that represents a plaform or screen orientation.
        * The element the attribute is added to will only be hidden when that platform or screen orientation is active.
        * Complements the [showWhen attribute](../ShowWhen).
        * @usage
        * ```html
        * <div hideWhen="android">I am hidden on Android!</div>
        * ```
        * @demo /docs/v2/demos/hide-when/
        * @see {@link ../ShowWhen ShowWhen API Docs}
        */
    export class HideWhen extends DisplayWhen {
            constructor(hideWhen: string, platform: Platform, ngZone: NgZone);
            /**
                * @private
                */
            hidden: any;
    }
}

declare module 'ionic/ionic/components/action-sheet/action-sheet' {
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name ActionSheet
        * @description
        * An Action Sheet is a dialog that lets the user choose from a set of
        * options. It appears on top of the app's content, and must be manually
        * dismissed by the user before they can resume interaction with the app.
        * Dangerous (destructive) options are made obvious. There are easy
        * ways to cancel out of the action sheet, such as tapping the backdrop or
        * hitting the escape key on desktop.
        *
        * An action sheet is created from an array of `buttons`, with each button
        * including properties for its `text`, and optionally a `style` and `handler`.
        * If a handler returns `false` then the action sheet will not be dismissed. An
        * action sheet can also optionally have a `title` and a `subTitle`.
        *
        * A button's `style` property can either be `destructive` or `cancel`. Buttons
        * without a style property will have a default style for its platform. Buttons
        * with the `cancel` style will always load as the bottom button, no matter where
        * it shows up in the array. All other buttons will show up in the order they
        * have been added to the `buttons` array. Note: We recommend that `destructive`
        * buttons show be the first button in the array, making it the button on top.
        *
        * Its shorthand is to add all the action sheet's options from within the
        * `ActionSheet.create(opts)` first argument. Otherwise the action sheet's
        * instance has methods to add options, such as `setTitle()` or `addButton()`.
        *
        * @usage
        * ```ts
        * constructor(nav: NavController) {
        *   this.nav = nav;
        * }
        *
        * presentActionSheet() {
        *   let actionSheet = ActionSheet.create({
        *     title: 'Modify your album',
        *     buttons: [
        *       {
        *         text: 'Destructive',
        *         style: 'destructive',
        *         handler: () => {
        *           console.log('Destructive clicked');
        *         }
        *       },
        *       {
        *         text: 'Archive',
        *         handler: () => {
        *           console.log('Archive clicked');
        *         }
        *       },
        *       {
        *         text: 'Cancel',
        *         style: 'cancel',
        *         handler: () => {
        *           console.log('Cancel clicked');
        *         }
        *       }
        *     ]
        *   });
        *
        *   this.nav.present(actionSheet);
        * }
        * ```
        *
        * @demo /docs/v2/demos/action-sheet/
        * @see {@link /docs/v2/components#action-sheets ActionSheet Component Docs}
        */
    export class ActionSheet extends ViewController {
            constructor(opts?: {});
            /**
             * @private
             */
            getTransitionName(direction: any): any;
            /**
                * @param {string} title Action sheet title
                */
            setTitle(title: any): void;
            /**
                * @param {string} subTitle Action sheet subtitle
                */
            setSubTitle(subTitle: any): void;
            /**
                * @param {Object} button Action sheet button
                */
            addButton(button: any): void;
            /**
                * @param {Object} opts Action sheet options
                */
            static create(opts?: {}): ActionSheet;
    }
}

declare module 'ionic/ionic/components/alert/alert' {
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name Alert
        * @description
        * An Alert is a dialog that presents users with either information, or used
        * to receive information from the user using inputs. An alert appears on top
        * of the app's content, and must be manually dismissed by the user before
        * they can resume interaction with the app.
        *
        * An alert is created from an array of `buttons` and optionally an array of
        * `inputs`. Each button includes properties for its `text`, and optionally a
        * `handler`. If a handler returns `false` then the alert will not be dismissed.
        * An alert can also optionally have a `title`, `subTitle` and `message`.
        *
        * All buttons will show up in the order they have been added to the `buttons`
        * array, from left to right. Note: The right most button (the last one in the
        * array) is the main button.
        *
        * Alerts can also include inputs whos data can be passed back to the app.
        * Inputs can be used to prompt users for information.
        *
        * Its shorthand is to add all the alert's options from within the
        * `Alert.create(opts)` first argument. Otherwise the alert's
        * instance has methods to add options, such as `setTitle()` or `addButton()`.
        *
        * @usage
        * ```ts
        * constructor(nav: NavController) {
        *   this.nav = nav;
        * }
        *
        * presentAlert() {
        *   let alert = Alert.create({
        *     title: 'Low battery',
        *     subTitle: '10% of battery remaining',
        *     buttons: ['Dismiss']
        *   });
        *   this.nav.present(alert);
        * }
        *
        * presentConfirm() {
        *   let alert = Alert.create({
        *     title: 'Confirm purchase',
        *     message: 'Do you want to buy this book?',
        *     buttons: [
        *       {
        *         text: 'Cancel',
        *         handler: () => {
        *           console.log('Cancel clicked');
        *         }
        *       },
        *       {
        *         text: 'Buy',
        *         handler: () => {
        *           console.log('Buy clicked');
        *         }
        *       }
        *     ]
        *   });
        *   this.nav.present(alert);
        * }
        *
        * presentPrompt() {
        *   let alert = Alert.create({
        *     title: 'Login',
        *     inputs: [
        *       {
        *         name: 'username',
        *         placeholder: 'Username'
        *       },
        *       {
        *         name: 'password',
        *         placeholder: 'Password',
        *         type: 'password'
        *       }
        *     ],
        *     buttons: [
        *       {
        *         text: 'Cancel',
        *         handler: data => {
        *           console.log('Cancel clicked');
        *         }
        *       },
        *       {
        *         text: 'Login',
        *         handler: data => {
        *           if (User.isValid(data.username, data.password)) {
        *             // logged in!
        *           } else {
        *             // invalid login
        *             return false;
        *           }
        *         }
        *       }
        *     ]
        *   });
        *   this.nav.present(alert);
        * }
        * ```
        *
        */
    export class Alert extends ViewController {
            constructor(opts?: {});
            /**
             * @private
             */
            getTransitionName(direction: any): any;
            /**
                * @param {string} title Alert title
                */
            setTitle(title: any): void;
            /**
                * @param {string} subTitle Alert subtitle
                */
            setSubTitle(subTitle: any): void;
            /**
                * @private
                */
            setBody(message: any): void;
            /**
                * @param {string} message  Alert message content
                */
            setMessage(message: any): void;
            /**
                * @param {Object} input Alert input
                */
            addInput(input: any): void;
            /**
                * @param {Object} button Alert button
                */
            addButton(button: any): void;
            /**
                * @param {string} className CSS class name to add to the alert's outer wrapper
                */
            setCssClass(className: any): void;
            /**
                * @param {Object} opts Alert options
                */
            static create(opts?: {}): Alert;
    }
}

declare module 'ionic/ionic/components/item/item' {
    /**
      * @name Item
      * @description
      * Creates a list-item that can easily be swiped, deleted, reordered, edited, and more.
      *
      * There are three common ways to use an item:
      * - Use `<ion-item>` for something that is only non-clickable text.
      * - Use `<button ion-item>` for something that can be clicked/tapped. Typically this element will also have a `(click)` handler.
      * - Use `<a ion-item>` for when the item needs to contain a `href`.
      *
      * By default, `<button ion-item>` and `<a ion-item>` will receive a right arrow icon on iOS to signal that tapping the item will reveal more information.
      * To hide this icon, add the `detail-none` attribute to the item (eg: `<button ion-item detail-none>`). To add the icon when it is not displayed by default,
      * add the `detail-push` attribute (eg: `<ion-item detail-push>`).
      *
      * To break an item up into multiple columns, add multiple `<ion-item-content>` components inside of the item. By default,
      * this component will automatically be added inside of an `<ion-item>`, giving it a single column.
      *
      *
      * @usage
      * ```html
      *
      * <ion-list>
      *
      *   // default item
      *   <ion-item>
      *     {{item.title}}
      *   </ion-item>
      *
      *   // multiple item-content containers
      *   <ion-item>
      *     <ion-item-content>First Column</ion-item-content>
      *     <ion-item-content>Second Column</ion-item-content>
      *     <ion-item-content>Third Column</ion-item-content>
      *   </ion-item>
      *
      * </ion-list>
      *
      *  ```
      * @see {@link /docs/v2/components#lists List Component Docs}
      * @see {@link ../../list/List List API Docs}
      */
    export class Item {
        _buttons: any;
        _icons: any;
    }
}

declare module 'ionic/ionic/components/menu/menu-types' {
    /**
      * Menu Type
      * Base class which is extended by the various types. Each
      * type will provide their own animations for open and close
      * and registers itself with Menu.
      * @private
      */
    export class MenuType {
        constructor();
        setOpen(shouldOpen: any): Promise<{}>;
        setProgressStart(isOpen: any): void;
        setProgess(value: any): void;
        setProgressEnd(shouldComplete: any): Promise<{}>;
        ngOnDestroy(): void;
    }
}

declare module 'ionic/ionic/components/modal/modal' {
    import { ViewController } from 'ionic/ionic/components/nav/view-controller';
    /**
        * @name Modal
        * @description
        * A Modal is a content pane that goes over the user's current page.
        * Usually it is used for making a choice or editing an item. A modal uses the
        * `NavController` to
        * {@link /docs/v2/api/components/nav/NavController/#present present}
        * itself in the root nav stack. It is added to the stack similar to how
        * {@link /docs/v2/api/components/nav/NavController/#push NavController.push}
        * works.
        *
        * When a modal (or any other overlay such as an alert or actionsheet) is
        * "presented" to a nav controller, the overlay is added to the app's root nav.
        * After the modal has been presented, from within the component instance The
        * modal can later be closed or "dismissed" by using the ViewController's
        * `dismiss` method. Additionally, you can dismiss any overlay by using `pop`
        * on the root nav controller.
        *
        * A modal can also emit data, which is useful when it is used to add or edit
        * data. For example, a profile page could slide up in a modal, and on submit,
        * the submit button could pass the updated profile data, then dismiss the
        * modal.
        *
        * @usage
        * ```ts
        * import {Modal, NavController} from 'ionic/ionic';
        *
        * @Page(...)
        * class HomePage {
        *
        *  constructor(nav: NavController) {
        *    this.nav = nav;
        *  }
        *
        *  presentContactModal() {
        *    let contactModal = Modal.create(ContactUs);
        *    this.nav.present(contactModal);
        *  }
        *
        *  presentProfileModal() {
        *    let profileModal = Modal.create(Profile, { userId: 8675309 });
        *    profileModal.onDismiss(data => {
        *      console.log(data);
        *    });
        *    this.nav.present(profileModal);
        *  }
        *
        * }
        *
        * @Page(...)
        * class Profile {
        *
        *  constructor(viewCtrl: ViewController) {
        *    this.viewCtrl = viewCtrl;
        *  }
        *
        *  dismiss() {
        *    let data = { 'foo': 'bar' };
        *    this.viewCtrl.dismiss(data);
        *  }
        *
        * }
        * ```
        * @demo /docs/v2/demos/modal/
        * @see {@link /docs/v2/components#modals Modal Component Docs}
        */
    export class Modal extends ViewController {
            constructor(componentType: any, data?: {});
            /**
             * @private
             */
            getTransitionName(direction: any): any;
            /**
                * @param {Any} componentType Modal
                * @param {Object} data Modal options
                */
            static create(componentType: any, data?: {}): Modal;
    }
}

declare module 'ionic/ionic/components/nav/nav-controller' {
    import { ChangeDetectorRef, Compiler, ElementRef, NgZone, AppViewManager, Renderer } from 'angular2/core';
    import { Ion } from 'ionic/ionic/components/ion';
    import { IonicApp } from 'ionic/ionic/components/app/app';
    import { Config } from 'ionic/ionic/config/config';
    import { Keyboard } from 'ionic/ionic/util/keyboard';
    /**
        * _For examples on the basic usage of NavController, check out the
        * [Navigation section](../../../../components/#navigation) of the Component
        * docs._
        *
        * NavController is the base class for navigation controller components like
        * [`Nav`](../Nav/) and [`Tab`](../../Tabs/Tab/). You use navigation controllers
        * to navigate to [pages](#creating_pages) in your app. At a basic level, a
        * navigation controller is an array of pages representing a particular history
        * (of a Tab for example). This array can be manipulated to navigate throughout
        * an app by pushing and popping pages or inserting and removing them at
        * arbitrary locations in history.
        *
        * The current page is the last one in the array, or the top of the stack if we
        * think of it that way.  [Pushing](#push) a new page onto the top of the
        * navigation stack causes the new page to be animated in, while [popping](#pop)
        * the current page will navigate to the previous page in the stack.
        *
        * Unless you are using a directive like [NavPush](../NavPush/), or need a
        * specific NavController, most times you will inject and use a reference to the
        * nearest NavController to manipulate the navigation stack.
        *
        * <h3 id="injecting_nav_controller">Injecting NavController</h3>
        * Injecting NavController will always get you an instance of the nearest
        * NavController, regardless of whether it is a Tab or a Nav.
        *
        * Behind the scenes, when Ionic instantiates a new NavController, it creates an
        * injector with NavController bound to that instance (usually either a Nav or
        * Tab) and adds the injector to its own providers.  For more information on
        * providers and dependency injection, see [Providers and DI]().
        *
        * Instead, you can inject NavController and know that it is the correct
        * navigation controller for most situations (for more advanced situations, see
        * [Menu](../../Menu/Menu/) and [Tab](../../Tab/Tab/)).
        *
        * ```ts
        *  class MyComponent {
        *    constructor(nav: NavController) {
        *      this.nav = nav;
        *    }
        *  }
        * ```
        *
        * <h2 id="creating_pages">Page creation</h2>
        * _For more information on the `@Page` decorator see the [@Page API
        * reference](../../../decorators/Page/)._
        *
        * Pages are created when they are added to the navigation stack.  For methods
        * like [push()](#push), the NavController takes any component class that is
        * decorated with `@Page` as its first argument.  The NavController then
        * compiles that component, adds it to the app and animates it into view.
        *
        * By default, pages are cached and left in the DOM if they are navigated away
        * from but still in the navigation stack (the exiting page on a `push()` for
        * example).  They are destroyed when removed from the navigation stack (on
        * [pop()](#pop) or [setRoot()](#setRoot)).
        *
        *
        * <h2 id="Lifecycle">Lifecycle events</h2>
        * Lifecycle events are fired during various stages of navigation.  They can be
        * defined in any `@Page` decorated component class.
        *
        * ```ts
        * @Page({
        *   template: 'Hello World'
        * })
        * class HelloWorld {
        *   onPageLoaded() {
        *     console.log("I'm alive!");
        *   }
        *   onPageWillLeave() {
        *     console.log("Looks like I'm about to leave :(");
        *   }
        * }
        * ```
        *
        *
        *
        * - `onPageLoaded` - Runs when the page has loaded. This event only happens once per page being created and added to the DOM. If a page leaves but is cached, then this event will not fire again on a subsequent viewing. The `onPageLoaded` event is good place to put your setup code for the page.
        * - `onPageWillEnter` - Runs when the page is about to enter and become the active page.
        * - `onPageDidEnter` - Runs when the page has fully entered and is now the active page. This event will fire, whether it was the first load or a cached page.
        * - `onPageWillLeave` - Runs when the page is about to leave and no longer be the active page.
        * - `onPageDidLeave` - Runs when the page has finished leaving and is no longer the active page.
        * - `onPageWillUnload` - Runs when the page is about to be destroyed and have its elements removed.
        * - `onPageDidUnload` - Runs after the page has been destroyed and its elements have been removed.
        *
        * @see {@link /docs/v2/components#navigation Navigation Component Docs}
        */
    export class NavController extends Ion {
            constructor(parentnavCtrl: NavController, app: IonicApp, config: Config, keyboard: Keyboard, elementRef: ElementRef, anchorName: string, compiler: Compiler, viewManager: AppViewManager, zone: NgZone, renderer: Renderer, cd: ChangeDetectorRef);
            /**
                * Boolean if the nav controller is actively transitioning or not.
                * @private
                * @return {bool}
                */
            isTransitioning(): boolean;
            /**
                * Boolean if the nav controller is actively transitioning or not.
                * @private
                * @return {bool}
                */
            setTransitioning(isTransitioning: any, fallback?: number): void;
            /**
                * Push is how we can pass components and navigate to them. We push the component we want to navigate to on to the navigation stack.
                *
                * ```typescript
                * class MyClass{
                *    constructor(nav:NavController){
                *      this.nav = nav;
                *    }
                *
                *    pushPage(){
                *      this.nav.push(SecondView);
                *    }
                * }
                * ```
                *
                * We can also pass along parameters to the next view, such as data that we have on the current view. This is a similar concept to to V1 apps with `$stateParams`.
                *
                * ```typescript
                * class MyClass{
                *    constructor(nav:NavController){
                *      this.nav = nav;
                *    }
                *
                *    pushPage(user){
                *      this.nav.push(SecondView,{
                *       // user is an object we have in our view
                *       // typically this comes from an ngFor or some array
                *       // here we can create an object with a property of
                *       // paramUser, and set it's value to the user object we passed in
                *       paramUser: user
                *      });
                *    }
                * }
                * ```
                *
                * We'll look at how we can access that data in the `SecondView` in the navParam docs
                *
                * We can also pass any options to the transtion from that same method
                *
                * ```typescript
                * class MyClass{
                *    constructor(nav: NavController){
                *      this.nav = nav;
                *    }
                *
                *    pushPage(user){
                *      this.nav.push(SecondView,{
                *       // user is an object we have in our view
                *       // typically this comes from an ngFor or some array
                *       // here we can create an object with a property of
                *       // paramUser, and set it's value to the user object we passed in
                *       paramUser: user
                *      },{
                *       // here we can configure things like the animations direction or
                *       // or if the view should animate at all.
                *       direction: 'back'
                *      });
                *    }
                * }
                * ```
                * @param {Any} component The page component class you want to push on to the navigation stack
                * @param {Object} [params={}] Any nav-params you want to pass along to the next view
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                * @returns {Promise} Returns a promise, which resolves when the transition has completed
                */
            push(componentType: any, params: {}, opts: {}, callback: any): any;
            /**
                * Present is how we display overlays on top of the content, from within the
                * root level `NavController`. The `present` method is used by overlays, such
                * as `ActionSheet`, `Alert`, and `Modal`. The main difference between `push`
                * and `present`, is that `present` takes a `ViewController` instance, whereas
                * `push` takes a `Page` component class. Additionally, `present` will place
                * the overlay in the root NavController's stack.
                *
                * ```typescript
                * class MyClass{
                *    constructor(nav: NavController) {
                *      this.nav = nav;
                *    }
                *
                *    presentModal() {
                *      let modal = Modal.create(ProfilePage);
                *      this.nav.present(modal);
                *    }
                * }
                * ```
                *
                * @param {ViewController} enteringView The name of the component you want to push on the navigation stack
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                * @returns {Promise} Returns a promise, which resolves when the transition has completed
                */
            present(enteringView: any, opts?: {}): Promise<{}>;
            /**
                * If you wanted to navigate back from a current view, you can use the back-button or programatically call `pop()`
                * Similar to `push()`, you can pass animation options.
                *
                * ```typescript
                * class SecondView{
                *    constructor(nav:NavController){
                *      this.nav = nav;
                *    }
                *    goBack(){
                *      this.nav.pop();
                *    }
                * }
                * ```
                *
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                * @returns {Promise} Returns a promise when the transition is completed
                */
            pop(opts?: {}): any;
            /**
                * @private
                * Pop to a specific view in the history stack
                * @param view {ViewController} to pop to
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                */
            popTo(viewCtrl: any, opts?: {}): any;
            /**
                * Similar to `pop()`, this method let's you navigate back to the root of the stack, no matter how many views that is
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                */
            popToRoot(opts?: {}): any;
            /**
                * Inserts a view into the nav stack at the specified index.
                * This is useful if you need to add a view at any point in your navigation stack
                *
                * ```typescript
                * export class Detail {
                *    constructor(nav: NavController) {
                *      this.nav = nav;
                *    }
                *    insertView(){
                *      this.nav.insert(1,Info)
                *    }
                *  }
                * ```
                *
                * This will insert the `Info` view into the second slot of our navigation stack
                *
                * @param {Number} index The index where you want to insert the view
                * @param {Any} component The name of the component you want to insert into the nav stack
                * @returns {Promise} Returns a promise when the view has been inserted into the navigation stack
                */
            insert(index: any, componentType: any, params?: {}, opts?: {}): any;
            /**
                * Removes a view from the nav stack at the specified index.
                *
                * ```typescript
                * export class Detail {
                *    constructor(nav: NavController) {
                *      this.nav = nav;
                *    }
                *    removeView(){
                *      this.nav.remove(1)
                *    }
                *  }
                * ```
                *
                * @param {Number} index Remove the view from the nav stack at that index
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                * @returns {Promise} Returns a promise when the view has been removed
                */
            remove(index: any, opts?: {}): any;
            /**
                * @private
                */
            setViews(components: any, opts?: {}): any;
            /**
                * You can set the views of the current navigation stack and navigate to the last view past
                *
                *
                *```typescript
                * import {Page, NavController} from 'ionic/ionic'
                * import {Detail} from '../detail/detail'
                * import {Info} from '../info/info'
                *
                *  export class Home {
                *    constructor(nav: NavController) {
                *      this.nav = nav;
                *    }
                *    setPages() {
                *      this.nav.setPages([List,Detail, Info]);
                *    }
                *  }
                *```
                *
                *
                *In this example, we're giving the current nav stack an array of pages. Then the navigation stack will navigate to the last view in the array and remove the orignal view you came from.
                *
                *By default, animations are disabled, but they can be enabled by passing options to the navigation controller
                *
                *
                *```typescript
                * import {Page, NavController} from 'ionic/ionic'
                * import {Detail} from '../detail/detail'
                * import {Info} from '../info/info'
                *
                *  export class Home {
                *    constructor(nav: NavController) {
                *      this.nav = nav;
                *    }
                *    setPages() {
                *      this.nav.setPages([List,Detail, Info],{
                *        animate: true
                *      });
                *    }
                *  }
                *```
                *
                *
                *You can also pass any navigation params to the individual pages in the array.
                *
                *
                *```typescript
                * import {Page, NavController} from 'ionic/ionic'
                * import {Detail} from '../detail/detail'
                * import {Info} from '../info/info'
                *
                *  export class Home {
                *    constructor(nav: NavController) {
                *      this.nav = nav;
                *    }
                *    setPages() {
                *      this.nav.setPages([{
                *        componentType: List,
                *        params: {id: 43}
                *      }, {
                *        componentType: Detail,
                *        params: {id: 45}
                *      },{
                *        componentType: Info,
                *        params: {id: 5}
                *      }]);
                *    }
                *  }
                *```
                *
                * @param {Array} component an arry of components to load in the stack
                * @param {Object} [opts={}] Any options you want to use pass
                * @returns {Promise} Returns a promise when the pages are set
                */
            setPages(components: any, opts?: {}): any;
            /**
                * Set the root for the current navigation stack
                * @param {Component} The name of the component you want to push on the navigation stack
                * @param {Object} [params={}] Any nav-params you want to pass along to the next view
                * @param {Object} [opts={}] Any options you want to use pass to transtion
                * @returns {Promise} Returns a promise when done
                */
            setRoot(componentType: any, params?: {}, opts?: {}): any;
            /**
                * @private
                */
            _transition(enteringView: any, leavingView: any, opts: any, done: any): any;
            /**
                * @private
                */
            _render(enteringView: any, leavingView: any, opts: any, done: any): void;
            /**
                * @private
                */
            _postRender(enteringView: any, leavingView: any, opts: any, done: any): void;
            /**
                * @private
                */
            _beforeTrans(enteringView: any, leavingView: any, opts: any, done: any): void;
            /**
                * @private
                */
            _afterTrans(enteringView: any, leavingView: any, opts: any, done: any): void;
            /**
                * @private
                */
            _transComplete(): void;
            /**
                * @private
                */
            loadPage(viewCtrl: any, navbarContainerRef: any, opts: any, done: any): void;
            /**
                * @private
                */
            _setZIndex(enteringView: any, leavingView: any, direction: any): void;
            /**
                * @private
                */
            _cachePage(viewCtrl: any, shouldShow: any): void;
            /**
                * @private
                */
            _cleanup(activeView: any, previousView: any, skipDestroy: any, skipCache: any): void;
            /**
                * @private
                */
            swipeBackStart(): void;
            /**
                * @private
                */
            swipeBackProgress(value: any): void;
            /**
                * @private
                */
            swipeBackEnd(completeSwipeBack: any, rate: any): void;
            /**
                * @private
                */
            _sbComplete(): void;
            /**
                * Check to see if swipe-to-go-back is enabled
                * @param {boolean=} isSwipeBackEnabled Set whether or not swipe-to-go-back is enabled
                * @returns {boolean} Whether swipe-to-go-back is enabled
                */
            isSwipeBackEnabled(val: any): any;
            /**
                * If it's possible to use swipe back or not. If it's not possible
                * to go back, or swipe back is not enable then this will return false.
                * If it is possible to go back, and swipe back is enabled, then this
                * will return true.
                * @returns {boolean} Whether you can swipe to go back
                */
            canSwipeBack(): any;
            /**
                * Returns `true` if there's a valid previous page that we can pop back to.
                * Otherwise returns false.
                * @returns {boolean} Whether there is a page to go back to
                */
            canGoBack(): any;
            /**
                * @private
                */
            navbarViewContainer(nbContainer: any): any;
            /**
                * @private
                * @returns {TODO} TODO
                */
            anchorElementRef(): any;
            /**
                * @private
                */
            _add(viewCtrl: any): void;
            /**
                * @private
                */
            _incId(viewCtrl: any): void;
            /**
                * @private
                */
            _remove(viewOrIndex: any): void;
            /**
                * @private
                */
            _getStagedEntering(): any;
            /**
                * @private
                */
            _getStagedLeaving(): any;
            /**
                * @private
                * @returns {Component} TODO
                */
            getActive(): any;
            /**
                * @param {Index} The index of the page you want to get
                * @returns {Component} Returns the component that matches the index given
                */
            getByIndex(index: any): any;
            /**
                * @private
                * @param {TODO} view  TODO
                * @returns {TODO} TODO
                */
            getPrevious(viewCtrl: any): any;
            /**
                * First page in this nav controller's stack. This would not return a page which is about to be destroyed.
                * @returns {Component} Returns the first component page in the current stack
                */
            first(): any;
            /**
                * Last page in this nav controller's stack. This would not return a page which is about to be destroyed.
                * @returns {Component} Returns the last component page in the current stack
                */
            last(): any;
            /**
                * @private
                * @param {TODO} view  TODO
                * @returns {TODO} TODO
                */
            indexOf(viewCtrl: any): any;
            /**
                * Number of sibling views in the nav controller. This does
                * not include views which are about to be destroyed.
                * @returns {Number} The number of views in stack, including the current view
                */
            length(): number;
            /**
                * @private
                * @param {TODO} view  TODO
                * @returns {boolean}
                */
            isActive(viewCtrl: any): boolean;
            /**
                * Returns the root NavController.
                * @returns {NavController}
                */
            rootNav: this;
            /**
                * @private
                * @param {TODO} router  TODO
                */
            registerRouter(router: any): void;
    }
    /**
        * @name NavParams
        * @description
        * NavParams are an object that exists on a page and can contain data for that particular view.
        * Similar to how data was pass to a view in V1 with `$stateParams`, NavParams offer a much more flexible
        * option with a simple `get` method.
        *
        * @usage
        * ```ts
        * export class MyClass{
        *  constructor(params: NavParams){
        *    this.params = params;
        *    // userParams is an object we have in our nav-parameters
        *    this.params.get('userParams');
        *  }
        * }
        * ```
        * @demo /docs/v2/demos/nav-params/
        * @see {@link /docs/v2/components#navigation Navigation Component Docs}
        * @see {@link ../NavController/ NavController API Docs}
        * @see {@link ../Nav/ Nav API Docs}
        * @see {@link ../NavPush/ NavPush API Docs}
        */
    export class NavParams {
            /**
                * @private
                * @param {TODO} data  TODO
                */
            constructor(data: any);
            /**
                * Get the value of a nav-parameter for the current view
                *
                * ```ts
                * export class MyClass{
                *  constructor(params: NavParams){
                *    this.params = params;
                *    // userParams is an object we have in our nav-parameters
                *    this.params.get('userParams');
                *  }
                * }
                * ```
                *
                *
                * @param {string} parameter Which param you want to look up
                */
            get(param: any): any;
    }
}

declare module 'ionic/ionic/components/nav/view-controller' {
    import { EventEmitter } from 'angular2/core';
    import { NavParams } from 'ionic/ionic/components/nav/nav-controller';
    /**
        * @name ViewController
        * @description
        * Access various features and information about the current view
        * @usage
        *  ```ts
        *  import {Page, ViewController} from 'ionic/ionic';
        *  @Page....
        *  export class MyPage{
        *   constructor(viewCtrl: ViewController){
        *     this.viewCtrl = viewCtrl;
        *   }
        *  }
        *  ```
        */
    export class ViewController {
            _emitter: EventEmitter<any>;
            constructor(componentType: any, data?: {});
            subscribe(callback: any): void;
            emit(data: any): void;
            onDismiss(callback: any): void;
            dismiss(data: any): any;
            setNav(navCtrl: any): void;
            getTransitionName(direction: any): any;
            getNavParams(): NavParams;
            setLeavingOpts(opts: any): void;
            /**
                * Check to see if you can go back in the navigation stack
                * @param {boolean} Check whether or not you can go back from this page
                * @returns {boolean} Returns if it's possible to go back from this Page.
                */
            enableBack(): boolean;
            /**
                * @private
                */
            setInstance(instance: any): void;
            /**
                * @private
                */
            name: any;
            /**
                * You can find out the index of the current view is in the current navigation stack
                *
                * ```typescript
                *  export class Page1 {
                *    constructor(view: ViewController){
                *      this.view = view;
                *      // Just log out the index
                *      console.log(this.view.index);
                *    }
                *  }
                * ```
                *
                * @returns {Number} Returns the index of this page within its NavController.
                */
            index: any;
            /**
                * @returns {boolean} Returns if this Page is the root page of the NavController.
                */
            isRoot(): boolean;
            /**
                * @private
                */
            addDestroy(destroyFn: any): void;
            /**
                * @private
                */
            destroy(): void;
            /**
                * @private
                */
            setNavbarTemplateRef(templateRef: any): void;
            /**
                * @private
                */
            getNavbarTemplateRef(): any;
            /**
                * @private
                */
            getNavbarViewRef(): any;
            /**
                * @private
                */
            setNavbarViewRef(viewContainerRef: any): void;
            /**
                * @private
                */
            setPageRef(elementRef: any): void;
            /**
                * @private
                * @returns {ElementRef} Returns the Page's ElementRef
                */
            pageRef(): any;
            /**
                * @private
                */
            setContentRef(elementRef: any): void;
            /**
                * @private
                * @returns {ElementRef} Returns the Page's Content ElementRef
                */
            contentRef(): any;
            /**
                * @private
                */
            setContent(directive: any): void;
            /**
                * @private
                * @returns {Component} Returns the Page's Content component reference.
                */
            getContent(): any;
            /**
                * @private
                */
            setNavbar(directive: any): void;
            /**
                * @private
                */
            getNavbar(): any;
            /**
                * You can find out of the current view has a Navbar or not. Be sure to wrap this in an `onPageWillEnter` method in order to make sure the view has rendered fully.
                *
                * ```typescript
                * export class Page1 {
                *  constructor(view: ViewController) {
                *    this.view = view
                *  }
                *  onPageWillEnter(){
                *    console.log('Do we have a Navbar?', this.view.hasNavbar());
                *  }
                *}
                * ```
                *
                * @returns {boolean} Returns a boolean if this Page has a navbar or not.
                */
            hasNavbar(): boolean;
            /**
                * @private
                */
            navbarRef(): any;
            /**
                * @private
                */
            titleRef(): any;
            /**
                * @private
                */
            navbarItemRefs(): any;
            /**
                * @private
                */
            backBtnRef(): any;
            /**
                * @private
                */
            backBtnTextRef(): any;
            /**
                * @private
                */
            navbarBgRef(): any;
            /**
                * You can change the text of the back button on a view-by-view basis.
                *
                * ```ts
                * export class MyClass{
                *  constructor(viewCtrl: ViewController){
                *    this.viewCtrl = viewCtrl
                *  }
                *  onPageWillEnter() {
                *    this.viewCtrl.setBackButtonText('Previous');
                *  }
                * }
                * ```
                * Make sure you use the view events when calling this method, otherwise the back-button will not have been created
                *
                * @param {string} backButtonText Set the back button text.
                */
            setBackButtonText(val: any): void;
            /**
                * Set if the back button for the current view is visible or not. Be sure to wrap this in `onPageWillEnter` to make sure the has been compleltly rendered.
                * @param {boolean} Set if this Page's back button should show or not.
                */
            showBackButton(shouldShow: any): void;
            /**
                * @private
                */
            isLoaded(): any;
            /**
                * @private
                * The view has loaded. This event only happens once per view being
                * created. If a view leaves but is cached, then this will not
                * fire again on a subsequent viewing. This method is a good place
                * to put your setup code for the view; however, it is not the
                * recommended method to use when a view becomes active.
                */
            loaded(): void;
            /**
                * @private
                * The view is about to enter and become the active view.
                */
            willEnter(): void;
            /**
                * @private
                * The view has fully entered and is now the active view. This
                * will fire, whether it was the first load or loaded from the cache.
                */
            didEnter(): void;
            /**
                * @private
                * The view has is about to leave and no longer be the active view.
                */
            willLeave(): void;
            /**
                * @private
                * The view has finished leaving and is no longer the active view. This
                * will fire, whether it is cached or unloaded.
                */
            didLeave(): void;
            /**
                * @private
                * The view is about to be destroyed and have its elements removed.
                */
            willUnload(): void;
            /**
                * @private
                * The view has been destroyed and its elements have been removed.
                */
            didUnload(): void;
    }
}

declare module 'ionic/ionic/components/option/option' {
    import { ElementRef } from 'angular2/core';
    /**
      * @name Option
      */
    export class Option {
        constructor(_elementRef: ElementRef);
        value: string;
        checked: boolean;
        checked: any;
        text: any;
    }
}

declare module 'ionic/ionic/components/overlay/overlay' {
    /**
      * @private
      */
    export class OverlayNav {
        constructor();
    }
}

declare module 'ionic/ionic/platform/storage/storage' {
    /**
        * @private
     */
    export class Storage {
            constructor(strategyCls: StorageEngine, options: any);
            get(key: any): any;
            getJson(key: any): any;
            set(key: any, value: any): any;
            remove(key: any): any;
            query(query: any, params: any): any;
    }
    /**
        * @private
     */
    export class StorageEngine {
            get(key: any, value: any): void;
            set(key: any, value: any): void;
            remove(key: any): void;
            query(query: any, params: any): void;
    }
}

declare module 'ionic/ionic/platform/storage/local-storage' {
    import { StorageEngine } from 'ionic/ionic/platform/storage/storage';
    /**
        * @name LocalStorage
        * @description
        * The LocalStorage storage engine uses the browser's local storage system for
        * storing key/value pairs.
        *
        * Note: LocalStorage should ONLY be used for temporary data that you can afford to lose.
        * Given disk space constraints on a mobile device, local storage might be "cleaned up"
        * by the operating system (iOS).
        *
        * For guaranteed, long-term storage, use the SqlStorage engine which stores data in a file.
        *
        * @usage
        * ```ts
        * import {Page, Storage, LocalStorage} from 'ionic/ionic';
        * @Page({
        *   template: `<ion-content></ion-content>`
        * });
        * export class MyClass{
        *  constructor(){
        *    this.local = new Storage(LocalStorage);
        *    this.local.set('didTutorial', true);
        *  }
        *}
        *```
        * @demo /docs/v2/demos/local-storage/
        * @see {@link /docs/v2/platform/storage/ Storage Platform Docs}
        */
    export class LocalStorage extends StorageEngine {
            constructor();
            /**
                * Get the value of a key in LocalStorage
                * @param {String} key the key you want to lookup in LocalStorage
                */
            get(key: any): Promise<{}>;
            /**
                * Set a key value pair and save it to LocalStorage
                * @param {String} key the key you want to save to LocalStorage
                * @param {Any} value the value of the key you're saving
                */
            set(key: any, value: any): Promise<{}>;
            /**
                * Remove a key from LocalStorage
                * @param {String} key the key you want to remove from LocalStorage
                */
            remove(key: any): Promise<{}>;
    }
}

declare module 'ionic/ionic/platform/storage/sql' {
    import { StorageEngine } from 'ionic/ionic/platform/storage/storage';
    /**
        * SqlStorage uses SQLite or WebSQL (development only!) to store data in a
        * persistent SQL store on the filesystem.
        *
        * This is the preferred storage engine, as data will be stored in appropriate
        * app storage, unlike Local Storage which is treated differently by the OS.
        *
        * For convenience, the engine supports key/value storage for simple get/set and blob
        * storage. The full SQL engine is exposed underneath through the `query` method.
        *
        * @usage
     ```js
        * let storage = new Storage(SqlStorage, options);
        * storage.set('name', 'Max');
        * storage.get('name').then((name) => {
        * });
        *
        * // Sql storage also exposes the full engine underneath
        * storage.query('insert into projects(name, data) values('Cool Project', 'blah')');
        * storage.query('select * from projects').then((resp) => {})
        * ```
        *
        * The `SqlStorage` service supports these options:
        * {
        *   name: the name of the database (__ionicstorage by default)
        *   backupFlag: // where to store the file, default is BACKUP_LOCAL which DOES NOT store to iCloud. Other options: BACKUP_LIBRARY, BACKUP_DOCUMENTS
        *   existingDatabase: whether to load this as an existing database (default is false)
        * }
        *
        */
    export class SqlStorage extends StorageEngine {
            static BACKUP_LOCAL: number;
            static BACKUP_LIBRARY: number;
            static BACKUP_DOCUMENTS: number;
            constructor(options?: {});
            _getBackupLocation(dbFlag: any): number;
            _tryInit(): void;
            /**
                * Perform an arbitrary SQL operation on the database. Use this method
                * to have full control over the underlying database through SQL operations
                * like SELECT, INSERT, and UPDATE.
                *
                * @param {string} query the query to run
                * @param {array} params the additional params to use for query placeholders
                * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
                */
            query(query: any, params?: any[]): Promise<{}>;
            /**
                * Get the value in the database identified by the given key.
                * @param {string} key the key
                * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
                */
            get(key: any): Promise<{}>;
            /**
             * Set the value in the database for the given key. Existing values will be overwritten.
             * @param {string} key the key
             * @param {string} value The value (as a string)
             * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
             */
            set(key: any, value: any): Promise<{}>;
            /**
             * Remove the value in the database for the given key.
             * @param {string} key the key
             * @param {string} value The value (as a string)
             * @return {Promise} that resolves or rejects with an object of the form { tx: Transaction, res: Result (or err)}
             */
            remove(key: any): Promise<{}>;
    }
}

declare module 'ionic/ionic/components/ion' {
    import { ElementRef } from 'angular2/core';
    import { Config } from 'ionic/ionic/config/config';
    /**
      * Base class for all Ionic components. Exposes some common functionality
      * that all Ionic components need, such as accessing underlying native elements and
      * sending/receiving app-level events.
      */
    export class Ion {
        constructor(elementRef: ElementRef, config: Config);
        ngOnInit(): void;
        getElementRef(): any;
        getNativeElement(): any;
        getDimensions(): any;
        width(): any;
        height(): any;
    }
}

declare module 'ionic/ionic/components/nav/nav-registry' {
    /**
      * @private
      * Map of possible pages that can be navigated to using an Ionic NavController
      */
    export class NavRegistry {
        constructor(pages?: any[]);
        get(pageName: any): any;
        set(page: any): void;
    }
}

